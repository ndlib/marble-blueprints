input AddItemMetadataToWebsiteInput {
	websiteId: String
	itemMetadataId: String
}

type File {
	id: String!
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	eTag: String
	expireTime: Int
	iiifImageUri: String
	iiifUri: String
	key: String
	label: String
	lastModified: String
	objectFileGroupId: String!
	FileGroup: FileGroup
	path: String
	sequence: Int
	size: Int
	source: String
	sourceType: String
	sourceUri: String
	storageClass: String
	TYPE: String
}

type FileGroup {
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	id: String
	objectFileGroupId: String
	title: String
	TYPE: String
	files: FilesConnection
}

type FileGroupsConnection {
	items: [FileGroup]
	nextToken: String
}

type FilesConnection {
	items: [File]
	nextToken: String
}

type ItemMetadata {
	id: String!
	childIds: [MetadataChildObject]
	collectionId: String
	collections: [MetadataObjectWithDisplayField]
	contributors: [MetadataObjectWithDisplayField]
	copyrightStatement: String
	copyrightStatus: String
	copyrightUrl: String
	createdDate: String
	creators: [MetadataObjectWithDisplayField]
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	dedication: String
	defaultFile: File
	defaultFilePath: String
	description: String
	digitalAccess: String
	dimensions: String
	expireTime: Int
	fileCreatedDate: String
	format: String
	geographicLocations: [MetadataObjectWithDisplayField]
	iiifUri: String
	languages: [MetadataObjectWithDisplayField]
	level: String
	linkToSource: String
	objectFileGroupId: String
	parentId: String
	parent: ItemMetadata
	partiallyDigitized: Boolean
	publishers: [MetadataObjectWithDisplayField]
	relatedIds: [MetadataRelatedObject]
	repository: String
	sequence: Int
	sourceSystem: String
	subjects: [MetadataSubject]
	title: String
	treePath: String
	TYPE: String
	uniqueIdentifier: String
	workType: String
	children: ItemMetadataConnection
	files: FilesConnection
}

type ItemMetadataConnection {
	items: [ItemMetadata]
	nextToken: String
}

type MetadataChildObject {
	id: String
	sequence: Int
	item: ItemMetadata
}

type MetadataObjectWithDisplayField {
	display: String
}

type MetadataRelatedObject {
	id: String
	sequence: Int
	item: ItemMetadata
}

type MetadataSubject {
	term: String
	uri: String
	authority: String
	variants: [String]
	display: String
	parentTerm: String
	broaderTerms: [MetadataSubject]
}

type Mutation {
	addItemMetadataToWebsite(input: AddItemMetadataToWebsiteInput): WebsiteItems
	removeItemMetadateFromWebsite(input: RemoveItemMetadataToWebsiteInput): WebsiteItems
	replaceCopyrightStatement(input: ReplaceCopyrightStatementInput): ItemMetadata
	replaceDefaultImage(input: ReplaceDefaultImageInput!): ItemMetadata
	replacePartiallyDigitized(input: ReplacePartiallyDigitizedInput): ItemMetadata
}

type Query {
	getWebsite(id: String!): Website
	getItem(id: String!): ItemMetadata
	getFileGroup(id: String!): FileGroup
	listFileGroups(limit: Int, nextToken: String): FileGroupsConnection
	listFileGroupsByStorageSystem(storageSystem: String!, typeOfData: String!, limit: Int, nextToken: String): FileGroupsConnection
	listFileGroupsForS3(limit: Int, nextToken: String): FileGroupsConnection
	listItemsBySourceSystem(id: String!, limit: Int, nextToken: String): ItemMetadataConnection
	listItemsByWebsite(id: String!, limit: Int, nextToken: String): WebsiteItemsConnection
	listWebsites(filter: WebsiteFilterInput, limit: Int, nextToken: String): WebsiteConnection
}

input RemoveItemMetadataToWebsiteInput {
	websiteId: String
	itemMetadataId: String
}

input ReplaceCopyrightStatementInput {
	id: String!
	generalCopyrightStatement: String!
	generalInCopyright: Boolean!
}

input ReplaceDefaultImageInput {
	id: String!
	generalDefaultFilePath: String!
	generalObjectFileGroupId: String!
}

input ReplacePartiallyDigitizedInput {
	id: String!
	generalPartiallyDigitized: Boolean!
}

type SupplementalData {
	itemId: String!
	rowType: String!
	collectionId: String
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	generalDefaultFilePath: String
	generalDefaultImageId: String
	generalObjectFileGroupId: String
	generalPartiallyDigitized: Boolean
	generalCopyrightStatement: String
	generalCopyrightStatus: String
	generalInCopyright: Boolean
}

type SupplementalDataConnection {
	items: [SupplementalData]
	nextToken: String
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type Website {
	id: String
	title: String
	TYPE: String
	websiteItems(limit: Int, nextToken: String): WebsiteItemsConnection
}

type WebsiteConnection {
	items: [Website]
	nextToken: String
}

input WebsiteFilterInput {
	title: String
}

type WebsiteItems {
	itemMetadataId: String
	websiteId: String
	ItemMetadata: ItemMetadata
}

type WebsiteItemsConnection {
	items: [WebsiteItems]
	nextToken: String
}