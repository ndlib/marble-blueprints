type File {
	id: String!
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	description: String
	digitalAccess: String
	eTag: String
	filePath: String
	iiifImageServiceUri: String
	iiifImageUri: String
	iiifUri: String
	lastModified: String
	mediaResourceId: String
	mediaServer: String
	mimeType: String
	objectFileGroupId: String!
	FileGroup: FileGroup
	sequence: Int
	size: Int
	source: String
	sourceType: String
	sourceUri: String
	title: String
	treePath: String
	TYPE: String
}

type FileToProcess {
	id: String
	copyrightStatus: String
	dateAddedToDynamo: String
	dateLastProcessed: String
	dateModifiedInDynamo: String
	description: String
	digitalAccess: String
	eTag: String
	filePath: String
	md5Checksum: String
	mimeType: String
	modifiedDate: String
	size: Int
	sourceBucketName: String
	sourceFilePath: String
	sourceSystem: String
	sourceType: String
	sourceUri: String
	storageSystem: String
	TYPE: String
}

type FileGroup {
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	id: String
	objectFileGroupId: String
	title: String
	TYPE: String
	files: FilesConnection
}

type FileGroupsConnection {
	items: [FileGroup]
	nextToken: String
}

type FilesConnection {
	items: [File]
	nextToken: String
}

type FilesToProcessConnection {
	items: [FileToProcess]
	nextToken: String
}

type ItemMetadata {
	id: String!
	access: String
	additionalNotes: String
	childIds: [MetadataChildObject]
	collectionId: String
	collections: [MetadataObjectWithDisplayField]
	contributors: [MetadataObjectWithDisplayField]
	copyrightStatement: String
	copyrightStatus: String
	copyrightUrl: String
	createdDate: String
	creators: [MetadataObjectWithDisplayField]
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	dedication: String
	defaultFile: File
	defaultFilePath: String
	description: String
	digitalAccess: String
	digitizationSource: String
	dimensions: String
	expireTime: Int
	fileCreatedDate: String
	format: String
	geographicLocations: [MetadataObjectWithDisplayField]
	iiifUri: String
	languages: [MetadataObjectWithDisplayField]
	level: String
	linkToSource: String
	objectFileGroupId: String
	parentId: String
	parent: ItemMetadata
	partiallyDigitized: Boolean
	publishers: [MetadataObjectWithDisplayField]
	relatedIds: [MetadataRelatedObject]
	repository: String
	sequence: Int
	sourceSystem: String
	subjects: [MetadataSubject]
	suppliedWebsiteId: String
	title: String
	treePath: String
	TYPE: String
	uniqueIdentifier: String
	workType: String
	children(limit: Int, nextToken: String): MinimumItemMetadataConnection
	files: FilesConnection
}

type ItemMetadataConnection {
	items: [ItemMetadata]
	limit: Int
	nextToken: String
}

type ItemToHarvestRecord {
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	harvestItemId: String
	PK: String
	SK: String
	sourceSystem: String
	TYPE: String
}

type MetadataChildObject {
	id: String
	sequence: Int
	item: ItemMetadata
}

type MetadataObjectWithDisplayField {
	display: String
}

type MetadataRelatedObject {
	id: String
	sequence: Int
	item: ItemMetadata
}

type MetadataSubject {
	term: String
	uri: String
	authority: String
	broaderTerms: [MetadataSubject]
	description: String
	display: String
	parentTerm: String
	variants: [String]
}

type MinimumItemMetadata{
	id: String
	level: String
	title: String
	description: String
}


type MinimumItemMetadataConnection {
	items: [MinimumItemMetadata]
	limit: Int
	nextToken: String
}

type Mutation {
	addItemToWebsite(itemId: String!, websiteId: String!): WebsiteItem
	addItemToHarvest(harvestItemId: String!, sourceSystem: String!): ItemToHarvestRecord
	removeItemFromWebsite(itemId: String!, websiteId: String!): WebsiteItem
	saveAdditionalNotesForWebsite(itemId: String!, websiteId: String, additionalNotes: String!): ItemMetadata
	saveCopyrightForWebsite(itemId: String!, websiteId: String, copyrightStatement: String!, inCopyright: Boolean!): ItemMetadata
	saveDefaultImageForWebsite(itemId: String!, websiteId: String, defaultFilePath: String!, objectFileGroupId: String!): ItemMetadata
	saveFileLastProcessedDate(itemId: String!): FileToProcess
	savePartiallyDigitizedForWebsite(itemId: String!, websiteId: String, partiallyDigitized: Boolean!): ItemMetadata
}

type Query {
	getWebsite(id: String!): Website
	getItem(id: String!, websiteId: String): ItemMetadata
	getFile(id: String!): File
	getFileGroup(id: String!): FileGroup
	getFileToProcessRecord(filePath: String!): FileToProcess
	listFileGroups(limit: Int, nextToken: String): FileGroupsConnection
	listFileGroupsByStorageSystem(storageSystem: String!, typeOfData: String!, limit: Int, nextToken: String): FileGroupsConnection
	listFileGroupsForS3(limit: Int, nextToken: String): FileGroupsConnection
	listFilesToProcess(dateLastProcessedBefore: String, limit: Int, nextToken: String): FilesToProcessConnection
	listItemsBySourceSystem(id: String!, limit: Int, nextToken: String): ItemMetadataConnection
	listItemsByWebsite(id: String!, limit: Int, nextToken: String): WebsiteItemsConnection
	listSupplementalDataRecords(id: String, websiteId: String): SupplementalDataConnection
	listWebsites(filter: WebsiteFilterInput, limit: Int, nextToken: String): WebsiteConnection
	showItemByWebsite(itemId: String!, websiteId: String): ItemMetadata
}

input ReplaceCopyrightStatementInput {
	id: String!
	generalCopyrightStatement: String!
	generalInCopyright: Boolean!
}

input ReplaceDefaultImageInput {
	id: String!
	generalDefaultFilePath: String!
	generalObjectFileGroupId: String!
}

input ReplacePartiallyDigitizedInput {
	id: String!
	generalPartiallyDigitized: Boolean!
}

type SupplementalDataConnection {
	items: [SupplementalDataRecord]
	nextToken: String
}

type SupplementalDataRecord {
	id: String
	additionalNotes: String
	copyrightStatement: String
	copyrightStatus: String
	copyrightUrl: String
	dateAddedToDynamo: String
	dateModifiedInDynamo: String
	defaultFilePath: String
	digitalAccess: String
	inCopyright: Boolean
	objectFileGroupId: String
	partiallyDigitized: Boolean
	title: String
	TYPE: String
	websiteId: String
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type Website {
	id: String
	title: String
	TYPE: String
	websiteItems(limit: Int, nextToken: String): WebsiteItemsConnection
}

type WebsiteConnection {
	items: [Website]
	nextToken: String
}

input WebsiteFilterInput {
	title: String
}

type WebsiteItem {
	itemId: String
	websiteId: String
	ItemMetadata: ItemMetadata
}

type WebsiteItemsConnection {
	items: [WebsiteItem]
	nextToken: String
}
