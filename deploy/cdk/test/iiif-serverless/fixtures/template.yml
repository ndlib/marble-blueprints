Transform: "AWS::Serverless-2016-10-31"
Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-iiif
    Description: IIIF Image API 2.1 server in an AWS Serverless Application
    Author: mbklein
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ["iiif", "image-processing"]
    HomePageUrl: https://github.com/nulib/serverless-iiif
    SemanticVersion: 2.0.3
    SourceCodeUrl: https://github.com/nulib/serverless-iiif
Parameters:
  SourceBucket:
    Type: String
    Description: Name of bucket containing source images
  StageName:
    Type: String
    Description: Name of the API stage to be deployed
    Default: latest
  IiifLambdaTimeout:
    Type: Number
    Description: The timeout for the lambda.
    Default: 10
  CacheEnabled:
    Type: String
    Description: Enables API response caching.
    Default: "false"
  CacheTtl:
    Type: Number
    Description: API cache time in seconds.
    Default: "3600"
Resources:
  Dependencies:
    Type: "AWS::Serverless::LayerVersion"
    Properties:
      LayerName:
        Fn::Sub: "${AWS::StackName}-dependencies"
      Description: Dependencies for IIIF app
      ContentUri: ./dependencies
      CompatibleRuntimes:
        - nodejs12.x
      LicenseInfo: "Apache-2.0"
    Metadata:
      BuildMethod: nodejs12.x
  IiifFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs12.x
      Handler: index.handler
      MemorySize: 3008
      Timeout:
        Ref: IiifLambdaTimeout
      CodeUri: ./src
      Layers:
        - Ref: Dependencies
      Policies:
        - AWSLambdaExecute
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetBucketLocation
              Resource:
                Fn::Sub: "arn:aws:s3:::${SourceBucket}"
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectACL
              Resource:
                Fn::Sub: "arn:aws:s3:::${SourceBucket}/*"
            - Effect: Allow
              Action:
                - s3:ListAllMyBuckets
              Resource: "*"
      Environment:
        Variables:
          tiffBucket:
            Fn::Sub: "${SourceBucket}"
      Events:
        GetId:
          Type: Api
          Properties:
            Path: /iiif/2/{id}
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsId:
          Type: Api
          Properties:
            Path: /iiif/2/{id}
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
        GetInfoJson:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/info.json
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsInfoJson:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/info.json
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
        GetImage:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/{proxy+}
            Method: GET
            RestApiId:
              Ref: IiifApi
        OptionsImage:
          Type: Api
          Properties:
            Path: /iiif/2/{id}/{proxy+}
            Method: OPTIONS
            RestApiId:
              Ref: IiifApi
  IiifApi:
    Type: "AWS::Serverless::Api"
    Properties:
      Name:
        Fn::Sub: "${AWS::StackName}-api"
      StageName:
        Fn::Sub: "${StageName}"
      EndpointConfiguration: "REGIONAL"
      CacheClusterEnabled:
        Fn::Sub: "${CacheEnabled}"
      CacheClusterSize: "0.5"
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          CachingEnabled:
            Fn::Sub: "${CacheEnabled}"
          CacheTtlInSeconds:
            Fn::Sub: "${CacheTtl}"
      Cors:
        AllowMethods: "'GET'"
        AllowOrigin: "'*'"
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "2018-12-14T18:28:00Z"
        schemes:
          - "http"
          - "https"
        paths:
          /iiif/2/{id}:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheKeyParameters:
                  - "method.request.path.id"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /iiif/2/{id}/info.json:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Set-Cookie:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheKeyParameters:
                  - "method.request.path.id"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /iiif/2/{id}/{proxy+}:
            get:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                - name: "Cookie"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Set-Cookie:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    contentHandling: "CONVERT_TO_BINARY"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "frz8df"
                cacheKeyParameters:
                  - "method.request.path.id"
                  - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
                - name: "Origin"
                  in: "header"
                  required: false
                  type: "string"
                - name: "Authorization"
                  in: "header"
                  required: false
                  type: "string"
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Credentials:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IiifFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
        x-amazon-apigateway-binary-media-types:
          - "*/*"
Outputs:
  Endpoint:
    Description: IIIF Endpoint URL
    Value:
      Fn::Sub: "https://${IiifApi}.execute-api.${AWS::Region}.amazonaws.com/${IiifApi.Stage}/iiif/2/"
  ApiId:
    Description: API Gateway ID
    Value:
      Ref: IiifApi
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}:ApiId"
