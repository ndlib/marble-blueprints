---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This CloudFormation will create the following:

    - A Security Group that allows incoming traffic over TCP Port 8182 for the IIIF Service
    - An ECS Cluster to allow Fargate or other container services to run in
    - An IAM Role to allow ECS Task Execution
    - An S3 Bucket for Logging
    - A Log Group for aggregarion of logs
    - A certificate for use with components in this region

Parameters:

  NetworkStackName:
    Type: String
    Description: The name of the parent networking stack created.
    Default: 'marble-network'

  RequireMFA:
    Type: String
    Description: Specify 'True' if you wish to require MFA when assuming the shared user roles defined in this template
    Default: 'True'

Conditions:

  MFARequired?: !Equals [ !Ref RequireMFA, 'True' ]

Resources:

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Join [':', [!Ref NetworkStackName, 'VPCID']]
      GroupDescription: Access to a public facing load balancer
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: '-1'
      SecurityGroupEgress:
          # Explicitly allow all outgoing traffic
          - CidrIp: 0.0.0.0/0
            IpProtocol: '-1'

  IIIFSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Join [':', [!Ref NetworkStackName, 'VPCID']]
      GroupDescription: 'Security Group to allow incoming traffic over Port 8182 for IIIF Service'
      SecurityGroupIngress:
        -
          IpProtocol: 'tcp'
          FromPort: 8182
          ToPort: 8182
          CidrIp: 0.0.0.0/0 # This may need to be changed for security purposes
      SecurityGroupEgress:
        -
          IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0 #This explicitly allows all outgoing traffic

  ContainerCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-Cluster'

  ContainerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser

  ContainerTaskExecutionLogPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows the ECS Tasks to create and write logs
      Roles:
        - !Ref ContainerTaskExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'

  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          ExpirationInDays: 3653
          NoncurrentVersionExpirationInDays: 1

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Statement:
          # Allow ALB access logs
          - Action: 's3:PutObject'
            Effect: 'Allow'
            Resource: !Sub 'arn:aws:s3:::${LogBucket}/web/*/AWSLogs/${AWS::AccountId}/*'
            Principal:
              AWS: '127311923021' # us-east-1 ELB AccountId https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions

  SharedLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
      LogGroupName: !Join [ '-', [ !Ref 'AWS::StackName', 'LogGroup']]

  # Shared Roles/Groups
  DataAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - !Ref AWS::AccountId
          Action:
          - sts:AssumeRole
      Path: '/'

  DataAdminGroup:
    Type: AWS::IAM::Group

  DataAdminPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows the DataAdminRole to read all logs and other global actions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowGlobals # Things that don't support resource level permissions
            Effect: Allow
            Action:
              - 's3:ListAllMyBuckets'
            Resource: '*'
      Roles:
        - !Ref DataAdminRole

  CanAssumeDataAdminRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows a user or group to assume the DataAdminRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Condition: !If
              - MFARequired?
              - Bool:
                  aws:MultiFactorAuthPresent: true
              - !Ref 'AWS::NoValue'
            Action: sts:AssumeRole
            Resource:
              - !GetAtt DataAdminRole.Arn
      Groups:
        - !Ref DataAdminGroup

  DebugRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - !Ref AWS::AccountId
          Action:
          - sts:AssumeRole
      Path: '/'

  DebugGroup:
    Type: AWS::IAM::Group

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows the DebugRole to read all logs and other global actions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowGlobals # Things that don't support resource level permissions
            Effect: Allow
            Action:
              - 'cloudformation:DescribeAccountLimits'
              - 'cloudformation:DescribeStackDriftDetectionStatus'
              - 'cloudformation:GetTemplateSummary'
              - 'cloudformation:ListExports'
              - 'cloudformation:ListImports'
              - 'cloudformation:ListStacks'
              - 'cloudwatch:GetMetricStatistics'
              - 'codepipeline:ListPipelines'
              - 'ecs:DescribeServices'
              - 'ecs:DescribeTaskDefinition'
              - 'ecs:DescribeTaskSets'
              - 'ecs:ListClusters'
              - 'ecs:ListServices'
              - 'ecs:ListTaskDefinitionFamilies'
              - 'ecs:ListTaskDefinitions'
              - 'logs:DescribeLogGroups'
              - 'logs:DescribeMetricFilters'
              - 's3:ListAllMyBuckets'
              - 'states:ListStateMachines'
            Resource: '*'
          - Sid: AllowReadingCloudwatchLogs
            Effect: Allow
            Action:
              - 'logs:Describe*'
              - 'logs:Get*'
              - 'logs:TestMetricFilter'
              - 'logs:FilterLogEvents'
            Resource:
              - !GetAtt SharedLogGroup.Arn
          - Sid: AllowReadingLogBucket
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt LogBucket.Arn
              - !Sub ${LogBucket.Arn}/*
            # This template is what creates the ECS cluster, and there are a lot of IAM permissions that only offer granularity
            # by the associated cluster, so makes sense to do all of the ECS permissions in this stack
            # Reference: https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-supported-iam-actions-resources.html
          - Sid: AllowECSCluster
            Effect: Allow
            Action:
              - 'ecs:DescribeClusters'
              - 'ecs:ListAttributes'
              - 'ecs:ListContainerInstances'
              - 'ecs:ListTagsForResource'
            Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ContainerCluster}'
          - Sid: AllowECSClusterTag
            Effect: Allow
            Action:
              - 'ecs:DescribeContainerInstances'
              - 'ecs:DescribeTasks'
              - 'ecs:ListTasks'
              - 'ecs:Poll'
              - 'ecs:RunTask'
              - 'ecs:StartTask'
            Resource: '*'
            Condition:
              ArnEquals:
                'ecs:cluster': !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${ContainerCluster}'
      Roles:
        - !Ref DebugRole

  CanAssumeDebugRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows a user or group to assume the DebugRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Condition: !If
              - MFARequired?
              - Bool:
                  aws:MultiFactorAuthPresent: true
              - !Ref 'AWS::NoValue'
            Action: sts:AssumeRole
            Resource:
              - !GetAtt DebugRole.Arn
      Groups:
        - !Ref DebugGroup

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS:
              - !Ref AWS::AccountId
          Action:
          - sts:AssumeRole
      Path: '/'

  DeploymentGroup:
    Type: AWS::IAM::Group

  DeploymentPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows the DeploymentRole to perform global actions
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowGlobals # Things that don't support resource level permissions
            Effect: Allow
            Action:
              - 'cloudformation:ListStacks'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListConnectedOAuthAccounts'
              - 'codebuild:ListCuratedEnvironmentImages'
              - 'codebuild:ListProjects'
              - 'codebuild:ListRepositories '
              - 'codebuild:ListSourceCredentials'
              - 'codepipeline:ListPipelines'
            Resource: '*'
      Roles:
        - !Ref DeploymentRole

  CanAssumeDeploymentRole:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows a user or group to assume the DeploymentRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Condition: !If
              - MFARequired?
              - Bool:
                  aws:MultiFactorAuthPresent: true
              - !Ref 'AWS::NoValue'
            Action: sts:AssumeRole
            Resource:
              - !GetAtt DeploymentRole.Arn
      Groups:
        - !Ref DeploymentGroup

Outputs:

  SharedLogGroup:
    Description: The name of the log group to use for application logs
    Value: !Ref SharedLogGroup
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LogGroup']]

  IIIFSecurityGroupID:
    Description: The Security Group ID for the IIIF Service
    Value: !Ref IIIFSecurityGroup
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'IIIFSecurityGroupID']]

  ContainerTaskExecutionRoleArn:
    Description: The ARN (Amazon Resource Name) of the Container Task Execution Role
    Value: !GetAtt ContainerTaskExecutionRole.Arn
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ContainerTaskExecutionRoleArn']]

  PublicLoadBalancerSecurityGroupID:
    Description: The ID of the load balancer security group
    Value: !Ref PublicLoadBalancerSecurityGroup
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicLoadBalancerSecurityGroup']]

  LogBucket:
    Description: Bucket to put all logs into for this application
    Value: !Ref LogBucket
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'LogBucket']]

  DataAdminRoleName:
    Description: Name of the role to attach policies to for data administration related activity
    Value: !Ref DataAdminRole
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DataAdminRoleName']]

  DebugRoleName:
    Description: Name of the role to attach policies to for debugging related activity
    Value: !Ref DebugRole
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DebugRoleName']]

  DeploymentRoleName:
    Description: Name of the role to attach policies to for deployment related activity
    Value: !Ref DeploymentRole
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DeploymentRoleName']]
