---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  Defines a domain or subdomain and creates a wildcard certificate that can be used for services built within it.

  Note: You will still have to manually create the acm validation record once the zone and certificate are created. If this
  is a subdomain, you will also need to create the ns record in your domain to forward to this zone once it's created. You can do
  this while the stack is waiting for the cert verification, which may take some time if this is a new domain.

Parameters:

  DomainName:
    Type: String
    Description: 'The domain or sub domain to be used for all entities created'
    Default: 'library.nd.edu'

  CreateDNSZone:
    Type: String
    Default: 'True'
    Description: If True, will attempt to create a Route 53 zone for this domain.

  UseDNSZone:
    Type: String
    Default: ''
    Description: Optional parameter to use a DNS zone if one already exists for this domain

Conditions:

  CreateDNS: !Equals [ !Ref CreateDNSZone, 'True' ]
  DNSZoneGiven:
    Fn::Not:
      - !Equals [!Ref UseDNSZone, '']
  DoExportDNSZone:
    Fn::Or:
      - Condition: DNSZoneGiven
      - Condition: CreateDNS


Resources:

  Zone:
    Type: "AWS::Route53::HostedZone"
    Condition: CreateDNS
    Properties:
      Name: !Ref DomainName

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join [ '.', [ '*', !Ref DomainName ]]
      DomainValidationOptions:
        - DomainName: !Join [ '.', [ '*', !Ref DomainName ]]
          ValidationDomain: !Join [ '.', [ '*', !Ref DomainName ]]
      ValidationMethod: DNS

Outputs:

  AcmArnParameter:
    Description: The ARN of the generated certificate
    Value: !Ref ACMCertificate
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ACMCertificateARN']]

  Domain:
    Description: The domain for all services.
    Value: !Ref DomainName
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'DomainName']]

  Zone:
    Description: The zone id created
    Condition: DoExportDNSZone
    Value: !If
      - CreateDNS
      - !Ref Zone
      - !Ref UseDNSZone

    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Zone']]
