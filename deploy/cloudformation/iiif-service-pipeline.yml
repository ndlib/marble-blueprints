AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - Creates a CodeBuild Project to pull the GitHub repository,
  build a Docker Image based on the repository.
  - Creates a CodePipeline that has a specific CodeBuild associated,
  which on a merge to master will build the Docker image, push it to
  a created ECR repository, and deploy it to a test stack.
  - The CodeBuild configurations are stored in ndlib/image-service rather than
  this file.

  Expects the following exports from the iiif-service stack(s):
    - IIIFProdServiceStackName:Service
    - IIIFTestServiceStackName:Service

Parameters:

  SourceRepoOwner:
    Type: String
    Default: ndlib
    Description: The owner of the repository in Github to poll

  SourceRepoName:
    Type: String
    Default: image-server
    Description: The name of the repository in Github to poll

  IIIFProdServiceStackName:
    Type: String
    Default: marble-image-service-prod
    Description: The name of the CloudFormation stack that created the production ECS Service

  IIIFTestServiceStackName:
    Type: String
    Default: marble-image-service-test
    Description: The name of the CloudFormation stack that created the test ECS Service

  TestImageServerHostname:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: SSM path to get the hostname of the IIIF Image Server
    Default: '/all/stacks/marble-image-service-test/hostname'

  ProdImageServerHostname:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: SSM path to get the hostname of the IIIF Image Server
    Default: '/all/stacks/marble-image-service-prod/hostname'

  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure stack that you created. Necessary
                 to locate and reference resources created by that stack.

  CDBranchName:
    Type: String
    Default: master
    Description: The name of the branch to watch for continuous deployment

  OAuth:
    Type: String
    NoEcho: true
    Description: The OAuth Token Value to connect CodePipeline to GitHub.

Outputs:

  PipelineName:
    Description: The name of the pipeline created by this stack
    Value: !Ref CodePipeline
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PipelineName']]

  ContainerRepositoryName:
    Description: Name of the created container repository
    Value: !Ref AmazonContainerRepository
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Repository']]

  ApprovalTopic:
    Description: The manual approval SNS topic
    Value: !Ref ApprovalTopic
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApprovalTopic']]

Resources:
  ApprovalTopic:
    Type: AWS::SNS::Topic

  AmazonContainerRepository:
    Type: AWS::ECR::Repository

  CodeBuildRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "We're allowing the role to perform all log-related activities."
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "ReadRequiredSSM"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/esu/github/ndlib-git/oauth"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${IIIFTestServiceStackName}/hostname"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${IIIFProdServiceStackName}/hostname"


  DockerQABuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-newman-tests'
      Description: 'Run Newman Tests against Image Server'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: GITHUB
        Location: 'https://github.com/ndlib/image-server.git'
        GitCloneDepth: 1
        ReportBuildStatus: true
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Pre-build started on `date`
                - npm install -g newman
            build:
              commands:
                - echo Build started on `date`
                - |
                  printf '{"name": "image_server.test","values": [{"key": "image-server-host","value": "%s:8182"}, {"key": "image-server-protocol","value": "https"}],"_postman_variable_scope": "environment"}' $TESTING_HOST >> test_env.json
                - cat test_env.json
                - newman run spec/image-server.postman_collection.json -e test_env.json
            post_build:
              commands:
                - echo Beginning post build on `date`
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:10.1.0
        EnvironmentVariables:
          - Name: TESTING_HOST
            Type: PARAMETER_STORE
            Value: !Sub "/all/stacks/${IIIFTestServiceStackName}/hostname"

  DockerCodePipelineBuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-docker-codepipeline'
      Description: 'Build Docker Image from GitHub for CodePipeline'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: deploy/aws/buildspec.yml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: APPLICATION_NAME
            Value: ndlib-image-server
          - Name: IMAGE_REPO_NAME
            Value: !Ref AmazonContainerRepository
          - Name: IMAGE_TAG
            Value: latest
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: TEST_CONTAINER_NAME
            Value:
              Fn::Join: [ '-', [ !Ref 'IIIFTestServiceStackName', 'ImageService']]
          - Name: PROD_CONTAINER_NAME
            Value:
              Fn::Join: [ '-', [ !Ref 'IIIFProdServiceStackName', 'ImageService']]

  PostDeployDocker:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-docker-add-tag'
      Description: 'CodeBuild to update the current_release tag in ECR'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Pre-build started on `date`
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
            build:
              commands:
                - DEPLOYED_VERSION=$(cat deployed_tag.txt)
                - docker pull $DEPLOYED_VERSION
                - docker tag $DEPLOYED_VERSION $REPOSITORY_URI:current_release
            post_build:
              commands:
                - echo Beginning post build on `date`
                - docker push $REPOSITORY_URI:current_release
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Ref AmazonContainerRepository
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId

  PostDeployGitHub:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-add-github-status'
      Description: 'CodeBuild to tag the latest commit in repo post-deploy'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Pre-build started on `date`
            build:
              commands:
                - SOURCE_SHA=$(cat sha.txt)
                - DATE=$(date)
            post_build:
              commands:
                - curl -i -X POST -H "Authorization:token ${OAUTH_TOKEN}" "${API_URL}/${SOURCE_SHA}" -d "{\"state\":\"success\",\"description\":\"Deployed to production on ${DATE}\",\"context\":\"${CODEBUILD_INITIATOR}\",\"target_url\":\"https://${TARGET_HOST}\"}"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: OAUTH_TOKEN
            Type: PARAMETER_STORE
            Value: /esu/github/ndlib-git/oauth
          - Name: API_URL
            Value: !Sub "https://api.github.com/repos/${SourceRepoOwner}/${SourceRepoName}/statuses"
          - Name: TARGET_HOST
            Type: PARAMETER_STORE
            Value: !Sub "/all/stacks/${IIIFProdServiceStackName}/hostname"

  CodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodePipelineToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  CodePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to Allow CodePipeline to do its work"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
              - codepipeline:AcknowledgeJob
              - codepipeline:GetJobDetails
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineState
              - codepipeline:GetPipelineExecution
              - codepipeline:ListPipelineExecutions
              - codepipeline:PollForJobs
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
              - codepipeline:RetryStageExecution
              - codepipeline:StartPipelineExecution
              - sns:Publish
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !GetAtt CodeS3Bucket.Arn
              - Fn::Join:
                  - ""
                  -
                    - !GetAtt CodeS3Bucket.Arn
                    - "/*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Resource:
              - !GetAtt DockerCodePipelineBuilder.Arn
              - !GetAtt DockerQABuilder.Arn
              - !GetAtt PostDeployDocker.Arn
              - !GetAtt PostDeployGitHub.Arn

          - Effect: Allow
            Action:
              - ecs:UpdateService
              - ecs:RegisterTaskDefinition
              - ecs:ListTasks
              - ecs:ListTaskDefinitions
              - ecs:ListClusters
              - ecs:ListServices
              - ecs:CreateService
            Resource: "*"
      Roles:
        - !Ref CodePipelineRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodeS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: "AppCode"
              ActionTypeId:
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: ndlib
                Repo: image-server
                Branch: !Ref CDBranchName
                OAuthToken: !Ref OAuth
              OutputArtifacts:
                - Name: SourceCode
        -
          Name: Build
          Actions:
            -
              Name: "Build"
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref DockerCodePipelineBuilder
        -
          Name: Test
          Actions:
            -
              Name: "Deploy"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Provider: ECS
                Version: "1"
              Configuration:
                ClusterName: !Sub '${InfrastructureStackName}-Cluster'
                ServiceName: !Sub '${IIIFTestServiceStackName}-ImageService'
                FileName: imagedefinitionstest.json
            -
              Name: "SmokeTest"
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref DockerQABuilder
              RunOrder: 2
            -
              Name: "Approval"
              ActionTypeId:
                Owner: AWS
                Category: Approval
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref ApprovalTopic
                CustomData: !Sub "A new version of https://github.com/${SourceRepoOwner}/${SourceRepoName} has been deployed to https://${TestImageServerHostname}:8182 and is awaiting your approval. If you approve these changes, they will be deployed to https://${ProdImageServerHostname}:8182"
              RunOrder: 3
        -
          Name: Production
          Actions:
            -
              Name: "Deploy"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Deploy
                Provider: ECS
                Version: "1"
              Configuration:
                ClusterName: !Sub '${InfrastructureStackName}-Cluster'
                ServiceName: !Sub '${IIIFProdServiceStackName}-ImageService'
                FileName: imagedefinitionsprod.json
        -
          Name: PostProduction
          Actions:
            -
              Name: "AddDockerTag"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref PostDeployDocker
              RunOrder: 1
            -
              Name: "AddGitHubStatus"
              InputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref PostDeployGitHub
              RunOrder: 1

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt CodeS3Bucket.Arn
              - !Sub ${CodeS3Bucket.Arn}/*

  DeploymentPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DeploymentRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPipelineActions
            Effect: Allow
            Action:
              - 'codepipeline:DisableStageTransition'
              - 'codepipeline:EnableStageTransition'
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineExecution'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionExecutions'
              - 'codepipeline:ListPipelineExecutions'
              - 'codepipeline:ListPipelines'
              - 'codepipeline:PutApprovalResult'
              - 'codepipeline:RetryStageExecution'
              - 'codepipeline:StartPipelineExecution'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}/*'
          - Sid: AllowCodeBuildActions
            Effect: Allow
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:BatchGetProjects'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListBuildsForProject'
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*'
          - Sid: AllowCodeBuildLogs
            Effect: Allow
            Action:
              - 'logs:GetLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
