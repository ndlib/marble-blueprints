---
AWSTemplateFormatVersion: '2010-09-09'

Description: >
  This CloudFormation will create the following:

    - A VPC (Virtual Private Cloud) for the components to exist within
    - A NAT Gateway to allow resources to reach resources outside of the VPC
    - A route table for the NAT Gateway to send traffic appropriately
    - Subnets within the VPC so that resources can have IP Addresses
    - A Security Group that allows incoming traffic over TCP Port 8182 for the IIIF Service
    - An ECS Cluster to allow Fargate or other container services to run in
    - An IAM Role to allow ECS Task Execution

Parameters:
  EnvironmentName:
    Type: String
    Description: Any value that describes where the service exists
    Default: "dev"

  DesiredVPCCIDRBlock:
    Type: String
    Description: The CIDR Block for the entirety of the VPC
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range in the form x.x.x.x/x"
    Default: 10.0.0.0/16

  PrivateSubnet1CIDR:
    Type: String
    Description: The CIDR Block for the 1st Private Subnet
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range in the form x.x.x.x/x"
    Default: 10.0.0.0/24

  PrivateSubnet2CIDR:
    Type: String
    Description: The CIDR Block for the 2nd Private Subnet
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range in the form x.x.x.x/x"
    Default: 10.0.1.0/24

  PublicSubnetCIDR:
    Type: String
    Description: The CIDR Block for the public subnet - needed for NAT Gateway
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: "Must be a valid IP CIDR range in the form x.x.x.x/x"
    Default: 10.0.2.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref DesiredVPCCIDRBlock
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet 2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes AZ1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes AZ2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnet2PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  IIIFSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security Group to allow incoming traffic over Port 8185 for IIIF Service"
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: 8185
          ToPort: 8185
          CidrIp: 0.0.0.0/0 # This may need to be changed for security purposes
      Tags:
        - Key: Name
          Value: "IIIF Security Group"

  ContainerCluster:
    Type: AWS::ECS::Cluster

  ContainerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Verion: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  ContainerTaskExecutionLogPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: A policy that allows the ECS Tasks to create and write logs
      Roles:
        - !Ref ContainerTaskExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"

Outputs:

  ClusterName:
    Description: The name of the ECS Cluster created by this CloudFormation
    Value: !Ref ContainerCluster
    Export:
      Name: MEL-ClusterName

  PrivateSubnet1ID:
    Description: The subnet ID of the 1st private subnet
    Value: !Ref PrivateSubnet1
    Export:
      Name: MEL-PrivateSubnet1ID

  PrivateSubnet2ID:
    Description: The subnet ID of the 2nd private subnet
    Value: !Ref PrivateSubnet2
    Export:
      Name: MEL-PrivateSubnet2ID

  IIIFSecurityGroupID:
    Description: The Security Group ID for the IIIF Service
    Value: !Ref IIIFSecurityGroup
    Export:
      Name: MEL-IIIFSecurityGroupID

  ContainerTaskExecutionRoleArn:
    Description: The ARN (Amazon Resource Name) of the Container Task Execution Role
    Value: !GetAtt ContainerTaskExecutionRole.Arn
    Export:
      Name: MEL-ContainerTaskExecutionRoleArn
