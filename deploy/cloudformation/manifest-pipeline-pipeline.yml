AWSTemplateFormatVersion: "2010-09-09"
Description: >
  - Creates a CodeBuild Project to pull the manifest pipeline GitHub repository,
  build the lambdas and StepFunctions and package them for deployment.
  - Creates a CodePipeline that has a specific CodeBuild associated,
  which creates a changed set from the package and deploys it to test and production.
  - Requires the iiif-service pipeline to be built.

Parameters:
  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure/networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  DomainStackName:
    Type: String
    Default: marble-domain
    Description: The name of the parent domain stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ProdStackName:
    Type: String
    Description: The name of the CloudFormation stack to use when creating the production resources
    Default: "marble-manifest-prod"
    MaxLength: 24
  ProdHostnamePrefix:
    Type: String
    Description: Hostname prefix for the production manifest bucket CDN
    MaxLength: 63
    AllowedPattern: ^$|(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid hostname prefix.
  TestStackName:
    Type: String
    Description: The name of the CloudFormation stack to use when creating the test resources
    Default: "marble-manifest-test"
    MaxLength: 24
  TestHostnamePrefix:
    Type: String
    Description: Hostname prefix for the test manifest bucket CDN
    MaxLength: 63
    AllowedPattern: ^$|(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid hostname prefix.
  CreateDNSRecord:
    Type: String
    Default: "True"
    Description: If True, will attempt to create a Route 53 DNS record for the test and prod stacks.
  ConfigurationRepoName:
    Type: String
    Description: The GitHub repo for the cloudfromation blueprints
    Default: marble-blueprints
  ConfigurationRepoBranchName:
    Type: String
    Description: The GitHub repo branch the codepipeline should checkout to run blueprints from
    Default: master
  ManifestPipelineRepoName:
    Type: String
    Description: The GitHub repo name
    Default: marble-manifest-pipeline
  ManifestPipelineRepoBranch:
    Type: String
    Description: The GitHub repo branch code pipelines should watch for changes on
    Default: master
  GitHubUser:
    Type: String
    Description: GitHub UserName. This username must have access to the GitHubToken.
    Default: ndlib
  GitHubToken:
    NoEcho: true
    Type: String
    Description: "Secret. OAuthToken with access to Repo. Long string of characters and digits. Go to https://github.com/settings/tokens"
  ImageServiceTestStackName:
    Type: String
    Default: "marble-image-service-test"
    Description: The name of the test IIIF image service stack
  ImageServiceProdStackName:
    Type: String
    Default: "marble-image-service-prod"
    Description: The name of the production IIIF image service stack
  DataBrokerStackName:
    Type: String
    Default: "marble-data-broker"
    Description: The name of the shared data broker stack
  AppConfigPathProd:
    Type: String
    Default: "/all/marble-manifest-pipeline-prod"
    Description: The path the keys for parameter store should be read and written to for config
  AppConfigPathTest:
    Type: String
    Default: "/all/marble-manifest-pipeline-test"
    Description: The path the keys for parameter store should be read and written to for config
  ContactTag:
    Type: String
    Description: The Contact tag to add to the deployed stacks
  OwnerTag:
    Type: String
    Description: The Owner tag to add to the deployed stacks

Outputs:

  PipelineName:
    Description: The name of the pipeline created by this stack
    Value: !Ref ProjectPipeline
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PipelineName']]

  ApprovalTopic:
    Description: The manual approval SNS topic
    Value: !Ref ApprovalTopic
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApprovalTopic']]

Resources:
  ImageProcessorContainerRepository:
    Type: AWS::ECR::Repository

  CodeBuildTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodeBuildRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeBuildRolePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
          - Effect: Allow
            Resource: !Sub
              - '${PipelineBucketArn}/*'
              - PipelineBucketArn: !GetAtt S3Bucket.Arn
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
          # The codebuild pipeline is going to create ECR records. Need to allow certain permissions for the authorization
          - Effect: Allow
            Action:
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:DescribeRepositories'
              - 'ecr:ListImages'
              - 'ecr:DescribeImages'
              - 'ecr:BatchGetImage'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:PutImage'
            Resource: 
              - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ImageProcessorContainerRepository}'
          - Effect: Allow
            Action:
              - 'ecr:GetAuthorizationToken'
            Resource: '*'
      Roles:
        - !Ref CodeBuildTrustRole
  CloudFormationTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CloudFormationRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CloudFormationRolePolicy
      PolicyDocument:
        Statement:
          # Allow the manifest-pipeline.yml to create any state machines it needs, using its stack name as a base for the name
          - Action:
              - 'states:CreateStateMachine'
              - 'states:DeleteStateMachine'
              - 'states:TagResource'
              - 'states:UpdateStateMachine'
            Resource:
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:*'
            Effect: 'Allow'
          # Allow the manifest-pipeline.yml to create any buckets it needs, using its stack name as a base for the name
          - Action:
              - 's3:CreateBucket'
              - 's3:DeleteBucket'
              - 's3:PutBucketLogging'
              - 's3:GetBucketCORS'
              - 's3:PutBucketCORS'
              - 's3:DeleteBucketPolicy'
              - 's3:PutBucketPolicy'
              - 's3:GetBucketPolicy'
              - 's3:PutBucketNotification'
            Resource:
              - !Sub 'arn:aws:s3:::${TestStackName}*'
              - !Sub 'arn:aws:s3:::${ProdStackName}*'
            Effect: 'Allow'
          # Allow the pipeline to change ACLs on the logging bucket since the it deploys a Cloudfront that needs to put logs here
          - Action:
              - 's3:PutBucketAcl'
              - 's3:GetBucketAcl'
            Resource:
              - !Sub
                - 'arn:aws:s3:::${ResolvedBucketName}'
                - ResolvedBucketName:
                    Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
            Effect: 'Allow'
          # Allow reading from the Pipeline's artifact bucket. Required to deploy the built lambda zips
          - Action:
              - s3:GetObject
            Resource:
              - !GetAtt S3Bucket.Arn
              - Fn::Join:
                  - ""
                  -
                    - !GetAtt S3Bucket.Arn
                    - "/*"
            Effect: Allow
          # Allow the role to read from SSM for the specific template parameters that are needed by manifest-pipeline.yml
          - Action:
              - 'ssm:Get*'
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${DataBrokerStackName}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${ImageServiceTestStackName}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${ImageServiceProdStackName}/*"
            Effect: Allow
          # Allow the role to create SSM resources specified by manifest-pipeline.yml
          - Action:
            - 'ssm:Delete*'
            - 'ssm:Put*'
            - 'ssm:AddTags*'
            - 'ssm:RemoveTagsFromResource'
            - 'ssm:GetParameters'
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${TestStackName}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/stacks/${ProdStackName}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPathProd}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPathTest}/*"
            Effect: Allow
          - Action:
              - 'lambda:*'
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${TestStackName}-*'
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProdStackName}-*'
            Effect: Allow
          - Action:
              - 'iam:GetRole'
              - 'iam:CreateRole'
              - 'iam:DeleteRole'
              - 'iam:CreatePolicy'
              - 'iam:AttachRolePolicy'
              - 'iam:DetachRolePolicy'
              - 'iam:DeleteRolePolicy'
              - 'iam:PutRolePolicy'
              - 'iam:PassRole'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${TestStackName}-*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProdStackName}-*'
            Effect: Allow
          # Allow the Pipeline to create IAM policies defined in manifest-pipeline.yml and attach them to the shared roles in app-infrastructure.yml
          - Action:
              - 'iam:CreatePolicy'
              - 'iam:DeletePolicy'
              - 'iam:GetPolicy'
              - 'iam:CreatePolicyVersion'
              - 'iam:DeletePolicyVersion'
              - 'iam:ListPolicyVersions'
              - 'iam:AttachRolePolicy'
              - 'iam:DetachRolePolicy'
              # For some reason it needs permission to describe the state machine when creating DebugPermissions for the test/prod stacks
              - 'states:DescribeStateMachine'
            Resource:
              - !Sub
                - 'arn:aws:iam::${AWS::AccountId}:role/${ResolvedDataAdminRoleName}'
                - ResolvedDataAdminRoleName: !ImportValue
                    Fn::Sub: ${InfrastructureStackName}:DataAdminRoleName
              - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${TestStackName}-*'
              - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${ProdStackName}-*'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${TestStackName}-*'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${ProdStackName}-*'
            Effect: Allow
          - Action:
              - 'cloudformation:CreateChangeSet'
            Resource: !Sub arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31
            Effect: Allow
          - Action:
              - 'cloudfront:CreateDistribution'
              - 'cloudfront:CreateCloudFrontOriginAccessIdentity'
              - 'cloudfront:DeleteDistribution'
              - 'cloudfront:DeleteCloudFrontOriginAccessIdentity'
              - 'cloudfront:UpdateDistribution'
              - 'cloudfront:UpdateCloudFrontOriginAccessIdentity'
              - 'cloudfront:TagResource'
              - 'cloudfront:GetDistribution'
              - 'cloudfront:GetCloudFrontOriginAccessIdentity'
              - 'cloudfront:GetCloudFrontOriginAccessIdentityConfig'
            Resource: '*'
            Effect: Allow
          # The manifest pipeline is going to create DNS records. Need to allow certain permissions for the associated zone
          - Action:
              - 'route53:ChangeResourceRecordSets'
              - 'route53:ListResourceRecordSets'
            Resource: 'arn:aws:route53:::hostedzone/*'
            Effect: Allow
          - Action:
              - 'route53:ListHostedZones'
              - 'route53:GetChange'
            Resource: '*'
            Effect: Allow
          # The manifest pipeline is going to need to RegisterTaskDefinition for ImageTaskDefinition
          - Action:
              - 'ecs:RegisterTaskDefinition'
            Resource: '*'
            Effect: Allow
          # The manifest pipeline is going to need PassRole for ImageTaskDefinition
          - Action:
              - 'iam:PassRole'
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role:${InfrastructureStackName}-*'
            Effect: Allow
      Roles:
        - !Ref CloudFormationTrustRole
  CodePipelineTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
  CodePipelineRolePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodePipelineRolePolicy
      PolicyDocument:
        Statement:
          - Action:
              - 'codebuild:StartBuild'
              - 'codebuild:BatchGetBuilds'
            Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}*'
            Effect: Allow
          - Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:DeleteChangeSet'
            Resource:
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${TestStackName}/*'
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProdStackName}/*'
            Effect: Allow
          - Action:
              - 'iam:PassRole'
            Resource: !GetAtt CloudFormationTrustRole.Arn
            Effect: Allow
          - Action:
              - 'sns:Publish'
              - 'sns:Subscribe'
            Effect: Allow
            Resource:
              - !Ref ApprovalTopic
          - Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketVersioning'
              - 's3:PutObject'
            Resource:
              - Fn::Join:
                - ""
                -
                  - !GetAtt S3Bucket.Arn
                  - "/*"
            Effect: Allow
      Roles:
        - !Ref CodePipelineTrustRole

  ApprovalTopic:
    Type: AWS::SNS::Topic

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-build"
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub "Building stage for ${ProdStackName}."
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref S3Bucket
        Image: "aws/codebuild/nodejs:7.0.0"
        Type: LINUX_CONTAINER
      ServiceRole: !GetAtt
        - CodeBuildTrustRole
        - Arn
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo "Ensure that the codebuild directory is executable"
                - chmod -R 755 ./scripts/codebuild/*
                - export BLUEPRINTS_DIR="$CODEBUILD_SRC_DIR_InfraCode"
                - ./scripts/codebuild/install.sh
            pre_build:
              commands:
                - ./scripts/codebuild/pre_build.sh
            build:
              commands:
                - ./scripts/codebuild/build.sh
            post_build:
              commands:
                - ./scripts/codebuild/post_build.sh
                - >
                    echo "{
                      \"Parameters\" : {
                        \"AppConfigPath\" : \"${AppConfigPathTest}\",
                        \"ImageSourceBucket\" : \"/all/stacks/${DataBrokerStackName}/publicbucket\",
                        \"ImageServerHostname\" : \"/all/stacks/${ImageServiceTestStackName}/hostname\",
                        \"HostnamePrefix\" : \"${TestHostnamePrefix}\",
                        \"DomainStackName\" : \"${DomainStackName}\",
                        \"CreateDNSRecord\" : \"${CreateDNSRecord}\",
                        \"InfrastructureStackName\" : \"${InfrastructureStackName}\"
                      },
                      \"Tags\" : {
                        \"Name\" : \"${TestStackName}\",
                        \"Contact\" : \"${ContactTag}\",
                        \"Owner\" : \"${OwnerTag}\",
                        \"Description\" : \"Test data pipeline for IIIF Manifests.\"
                      }
                    }" > test-stack-configuration.json
                - >
                    echo "{
                      \"Parameters\" : {
                        \"AppConfigPath\" : \"${AppConfigPathProd}\",
                        \"ImageSourceBucket\" : \"/all/stacks/${DataBrokerStackName}/publicbucket\",
                        \"ImageServerHostname\" : \"/all/stacks/${ImageServiceProdStackName}/hostname\",
                        \"HostnamePrefix\" : \"${ProdHostnamePrefix}\",
                        \"DomainStackName\" : \"${DomainStackName}\",
                        \"CreateDNSRecord\" : \"${CreateDNSRecord}\",
                        \"InfrastructureStackName\" : \"${InfrastructureStackName}\"
                      },
                      \"Tags\" : {
                        \"Name\" : \"${ProdStackName}\",
                        \"Contact\" : \"${ContactTag}\",
                        \"Owner\" : \"${OwnerTag}\",
                        \"Description\" : \"Production data pipeline for IIIF Manifests.\"
                      }
                    }" > prod-stack-configuration.json
          artifacts:
            files:
              - output.yml
              - test-stack-configuration.json
              - prod-stack-configuration.json

  DockerImageProcessorBuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-docker-image-processor'
      Description: 'Build Docker Image from GitHub for Image Processor'
      ServiceRole: !GetAtt
        - CodeBuildTrustRole
        - Arn
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
                - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
                - echo $COMMIT_HASH
                - IMAGE_TAG=${COMMIT_HASH:=latest}
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $REPOSITORY_URI:latest -t $REPOSITORY_URI:$COMMIT_HASH ./pyramid-generator
                - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$COMMIT_HASH
                - docker tag $REPOSITORY_URI:$COMMIT_HASH $REPOSITORY_URI:$COMMIT_HASH
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker images...
                - docker push $REPOSITORY_URI:latest
                - docker push $REPOSITORY_URI:$COMMIT_HASH
                - printf '[{"name":"%s","imageUri":"%s"}]' $TEST_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitionstest.json
                - printf '[{"name":"%s","imageUri":"%s"}]' $PROD_CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitionsprod.json
                - printf $CODEBUILD_RESOLVED_SOURCE_VERSION > sha.txt
                - printf $REPOSITORY_URI:$IMAGE_TAG > deployed_tag.txt
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_REPO_NAME
            Value: !Ref ImageProcessorContainerRepository

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled

  S3ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: SSEAndSSLPolicy
        Statement:
        - Sid: DenyInsecureConnections
          Effect: Deny
          Principal: "*"
          Action: s3:*
          Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false

  ProjectPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineTrustRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: AppCode
          InputArtifacts: []
          ActionTypeId:
            Version: "1"
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
          OutputArtifacts:
          - Name: AppCode
          Configuration:
            Repo: !Ref ManifestPipelineRepoName
            Branch: !Ref ManifestPipelineRepoBranch
            OAuthToken: !Ref GitHubToken
            Owner: !Ref GitHubUser
            PollForSourceChanges: true
          RunOrder: 1
        -
          Name: "InfraCode"
          ActionTypeId:
            Owner: ThirdParty
            Category: Source
            Provider: GitHub
            Version: "1"
          Configuration:
            Repo: !Ref ConfigurationRepoName
            Branch: !Ref ConfigurationRepoBranchName
            Owner: !Ref GitHubUser
            OAuthToken: !Ref GitHubToken
            PollForSourceChanges: false
          OutputArtifacts:
            - Name: InfraCode
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          InputArtifacts:
          - Name: AppCode
          - Name: InfraCode
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          OutputArtifacts:
          - Name: BuiltCode
          Configuration:
            ProjectName: !Ref CodeBuildProject
            PrimarySource: AppCode
          RunOrder: 1
        - Name: BuildDockerImage
          InputArtifacts:
          - Name: AppCode
          ActionTypeId:
            Category: Build
            Owner: AWS
            Version: "1"
            Provider: CodeBuild
          OutputArtifacts:
          - Name: BuiltCodeDockerImage
          Configuration:
            ProjectName: !Ref DockerImageProcessorBuilder
            PrimarySource: AppCode
          RunOrder: 2

      - Name: Test
        Actions:
          - Name: CreateChangeSet
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: BuiltCode
            Configuration:
              ActionMode: CHANGE_SET_REPLACE
              Capabilities: CAPABILITY_NAMED_IAM
              RoleArn: !GetAtt CloudFormationTrustRole.Arn
              StackName: !Ref TestStackName
              ChangeSetName: TestChangeSetName
              TemplateConfiguration: BuiltCode::test-stack-configuration.json
              TemplatePath: BuiltCode::output.yml
              ParameterOverrides: !Sub '{"ContainerImageUrl": "${ImageProcessorContainerRepository}:latest"}'
            RunOrder: 1
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              ActionMode: CHANGE_SET_EXECUTE
              ChangeSetName: TestChangeSetName
              RoleArn: !GetAtt CloudFormationTrustRole.Arn
              StackName: !Ref TestStackName
            RunOrder: 2
          -
            Name: "Approval"
            ActionTypeId:
              Owner: AWS
              Category: Approval
              Provider: Manual
              Version: "1"
            Configuration:
              NotificationArn: !Ref ApprovalTopic
              CustomData: !Sub "A new version of https://github.com/${GitHubUser}/${ManifestPipelineRepoName} has been deployed to the ${TestStackName} stack and is awaiting your approval. If you approve these changes, they will be deployed to the ${ProdStackName} stack."
            RunOrder: 3

      - Name: Production
        Actions:
          - Name: CreateChangeSet
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            InputArtifacts:
              - Name: BuiltCode
            Configuration:
              ActionMode: CHANGE_SET_REPLACE
              Capabilities: CAPABILITY_NAMED_IAM
              RoleArn: !GetAtt CloudFormationTrustRole.Arn
              StackName: !Ref ProdStackName
              ChangeSetName: ProdChangeSetName
              TemplateConfiguration: BuiltCode::prod-stack-configuration.json
              TemplatePath: BuiltCode::output.yml
              ParameterOverrides: !Sub '{"ContainerImageUrl": "${ImageProcessorContainerRepository}:latest"}'
            RunOrder: 1
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              ActionMode: CHANGE_SET_EXECUTE
              ChangeSetName: ProdChangeSetName
              RoleArn: !GetAtt CloudFormationTrustRole.Arn
              StackName: !Ref ProdStackName
            RunOrder: 2

      ArtifactStore:
        Type: S3
        Location: !Ref S3Bucket

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt S3Bucket.Arn
              - !Sub ${S3Bucket.Arn}/*
          - Sid: AllowPipelineActions
            Effect: Allow
            Action:
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineExecution'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionExecutions'
              - 'codepipeline:ListPipelineExecutions'
              - 'codepipeline:ListPipelines'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectPipeline}'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectPipeline}/*'
          - Sid: AllowCodeBuildActions
            Effect: Allow
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:BatchGetProjects'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListBuildsForProject'
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*'
          - Sid: AllowCodeBuildLogs
            Effect: Allow
            Action:
              - 'logs:GetLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
          # This pipeline currently creates a change set then executes. So in order to see execution details,
          # a Deployment user will need to see what may have gone wrong with the CloudFormation CHANGE_SET_EXECUTE
          # for the target stacks
          - Sid: AllowCloudformationActions
            Effect: Allow
            Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:GetStackPolicy'
              - 'cloudformation:GetTemplate'
              - 'cloudformation:ListChangeSets'
              - 'cloudformation:ListStackResources'
            Resource:
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${TestStackName}/*'
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProdStackName}/*'
              
  DeploymentPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DeploymentRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPipelineActions
            Effect: Allow
            Action:
              - 'codepipeline:DisableStageTransition'
              - 'codepipeline:EnableStageTransition'
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineExecution'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionExecutions'
              - 'codepipeline:ListPipelineExecutions'
              - 'codepipeline:ListPipelines'
              - 'codepipeline:PutApprovalResult'
              - 'codepipeline:RetryStageExecution'
              - 'codepipeline:StartPipelineExecution'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectPipeline}'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ProjectPipeline}/*'
          - Sid: AllowCodeBuildActions
            Effect: Allow
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:BatchGetProjects'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListBuildsForProject'
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*'
          - Sid: AllowCodeBuildLogs
            Effect: Allow
            Action:
              - 'logs:GetLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
          # This pipeline currently creates a change set then executes. So in order to see execution details,
          # a Deployment user will need to see what may have gone wrong with the CloudFormation CHANGE_SET_EXECUTE
          # for the target stacks
          - Sid: AllowCloudformationActions
            Effect: Allow
            Action:
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:GetStackPolicy'
              - 'cloudformation:GetTemplate'
              - 'cloudformation:ListChangeSets'
              - 'cloudformation:ListStackResources'
            Resource:
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${TestStackName}/*'
              - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProdStackName}/*'
