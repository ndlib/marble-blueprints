Transform: 'AWS::Serverless-2016-10-31'
Description: >
  - Creates a series of lambdas and a step function to process manifests.
  - The lambdas create iiif manifest and pyramid tiffs out of images.
  - The finished product are copied to a bucket to serve manifests out of and an image server
    to display the iiif images.
  - Creates a bucket for to serve manifests out of
  - Creates a bucket that the step functions use as an in process location.
  - Requires the iiif-service and marble-data-broker pipelines to be built.  Uses ssm keys from those services
Parameters:
  NetworkStackName:
    Type: String
    Description: The name of the parent networking stack created.
    Default: "marble-network"
  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure/networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  DomainStackName:
    Type: String
    Default: marble-domain
    Description: The name of the parent domain stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ImageSourceBucket:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The name of the source bucket that the IIIF Image service will read from for its assets.
    Default: '/all/stacks/marble-data-broker/publicbucket'
  ImageServerHostname:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The hostname of the IIIF Image Server
    Default: '/all/stacks/marble-image-service/hostname'
  AppConfigPath:
    Type: String
    Description: The path to look for the application config from
  MarbleProcessingKeyPath:
    Type: String
    Description: The ssm path to look for the marble data processing config from
    Default: '/all/marble-data-processing/prod'
  NoReplyEmailAddr:
    Type: String
    Description: Email address notification emails are sent from
    Default: "noreply@nd.edu"
  TroubleshooterEmailAddr:
    Type: String
    Description: Email address to send errors for debugging
    Default: "rdought1@nd.edu"
  CacheSettings:
    Type: Number
    Description: The cache value to hold the manifests for.
    Default: 300

  CreateDNSRecord:
    Type: String
    Default: "True"
    Description: If True, will attempt to create a Route 53 DNS record for the CloudFront.

  HostnamePrefix:
    Type: String
    Description: Hostname prefix for the manifest bucket CDN
    MaxLength: 63
    AllowedPattern: ^$|(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid hostname prefix value.
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container
  ContainerImageUrl:
    Type: String
    Description: The url of a docker image that will handle image processing
Conditions:

  CreateDNS: !Equals [ !Ref CreateDNSRecord, 'True' ]

Outputs:
  SchemaStateMachine:
    Value: !Ref SchemaStateMachine

  StateMachineMets:
    Value: !Ref StateMachineMets

  ProcessBucket:
    Value: !Ref ProcessBucket

  ManifestBucket:
    Value: !Ref ManifestBucket

  Hostname:
    Description: The combination of HostnamePrefix and Domain
    Value: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Hostname']]

  DistributionDomainName:
    Description: The cloudfront distribution domain name. Use this if creating your CNAME record via some other DNS
    Value: !GetAtt Distribution.DomainName

Resources:

  SSMImageServerBaseUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/image-server-base-url"
      Value: !Ref ImageServerHostname
      Description: Image server base url

  SSMImageSourceBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/image-server-bucket"
      Value: !Ref ImageSourceBucket
      Description: Image server base url

  SSMManifestServerBaseUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/manifest-server-base-url"
      Value: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Description: Manifest Server URL

  SSMManifestBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/manifest-server-bucket"
      Value: !Ref ManifestBucket
      Description: Manifest Server URL

  SSMProcessBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/process-bucket"
      Value: !Ref ProcessBucket
      Description: Manifest Server URL

  ProcessBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
        LogFilePrefix: s3/data-broker/

  ManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
        LogFilePrefix: s3/data-broker/
      CorsConfiguration:
        CorsRules:
          - Id: DefaultCorsHeader
            AllowedHeaders:
              - Authorization
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3000
          - Id: CSRFCorsHeader
            AllowedHeaders:
              - X-CSRF-Token
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'

  ManifestBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OriginAccessIdentity
    Properties:
      Bucket: !Ref ManifestBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetBucketCors
            Resource: !Sub ${ManifestBucket.Arn}
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
          -
            Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${ManifestBucket.Arn}/*
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  Route53DNSCreation:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneName: !Sub
        - '${ResolvedDomainName}.'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Comment: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Name: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt Distribution.DomainName

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  Distribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Join [':', [!Ref DomainStackName, 'ACMCertificateARN']]
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        Comment: !Sub
          - '${HostnamePrefix}.${ResolvedDomainName}'
          - ResolvedDomainName:
              Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        Aliases:
          - !Sub
            - '${HostnamePrefix}.${ResolvedDomainName}'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        DefaultRootObject: index.json
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
            Headers:
              - "Access-Control-Request-Headers"
              - "Access-Control-Request-Method"
              - "Origin"
              - "Authorization"
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: Bucket
          LambdaFunctionAssociations:
            -
              EventType: origin-request
              LambdaFunctionARN: !Sub ${SPARedirectionLambda.Arn}:${SPARedirectionLambdaV2.Version}
        Origins:
          - Id: Bucket
            DomainName: !GetAtt ManifestBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref OriginAccessIdentity
        Logging:
          # This should result in "logbucketname.s3.amazonaws.com", where "logbucketname" is the value from an export
          # named "InfrastructureStackName:LogBucket"
          Bucket: !Join
            - .
            - - !ImportValue
                Fn::Join: [':', [!Ref InfrastructureStackName, 'LogBucket']]
              - s3
              - !Ref AWS::URLSuffix
          Prefix: !Sub
            - 'web/${HostnamePrefix}.${ResolvedDomainName}/'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
          IncludeCookies: true

  LambdaEdgeBasicExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SPARedirectionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        # This Lambda will take incoming web requests and adjust the request URI as appropriate.
        # any directory that does not end with an index.json will have that appended to it.
        # this based off of the pattern for the marble urls which always require a directory with an
        # index.json
        ZipFile: >
          'use strict';
          exports.handler = (event, context, callback) => {
              var request = event.Records[0].cf.request;

              if (!request.uri.endsWith('/index.json') && !request.uri.endsWith('.xml')) {
                if (request.uri.endsWith('/')) {
                  request.uri = request.uri + 'index.json'
                } else {
                  request.uri = request.uri + '/index.json'
                }
              }
              return callback(null, request);
          };
      Description: Basic rewrite rule to send directory requests to appropriate locations in the SPA
      Handler: index.handler
      Role: !GetAtt LambdaEdgeBasicExecutionRole.Arn
      Runtime: nodejs8.10

  SPARedirectionLambdaV2:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SPARedirectionLambda
      Description: Adds the rewrite rules as needed

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "StartStateMachine"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - 'states:ListStateMachines'
                  - 'states:StartExecution'
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-SchemaStateMachine"
        - PolicyName: ManifestPipelineSsmPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - "ssm:GetParametersByPath"
                Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - PolicyName: ImageDerivativeCacheBucketPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                  - "s3:ListBucketVersions"
                  - "s3:PutObjectVersionAcl"
                  - "s3:PutObjectAcl"
                Effect: "Allow"
                Resource:
                  - !GetAtt ProcessBucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt ProcessBucket.Arn
                        - "/*"
                  - !GetAtt ManifestBucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt ManifestBucket.Arn
                        - "/*"
                  - Fn::Join:
                    - ""
                    -
                      - !Sub "arn:aws:s3:::"
                      - !Ref ImageSourceBucket
                  - Fn::Join:
                    - ""
                    -
                      - !Sub "arn:aws:s3:::"
                      - !Ref ImageSourceBucket
                      - "/*"
        - PolicyName: ManifestPipelineSesPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - "ses:SendEmail"
                Effect: "Allow"
                Resource: "*"
        - PolicyName: ManifestPipelineLogPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - "logs:CreateLogStream"
                  - "logs:CreateLogGroup"
                  - "logs:PutLogEvents"
                Effect: "Allow"
                Resource: "*"

  AutoRun:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      CodeUri: autorun/
      Runtime: python3.7
      Timeout: 300
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Events:
        S3FileListener:
          Type: S3
          Properties:
            Bucket: !Ref ProcessBucket
            Events: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: 'main.csv'
      Environment:
        Variables:
          STATE_MACHINE: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-SchemaStateMachine"

  InitManifestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: init/
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          NO_REPLY_EMAIL: !Ref NoReplyEmailAddr
          TROUBLESHOOTING_EMAIL: !Ref TroubleshooterEmailAddr

  ProcessMetsInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: process_mets_input/

  ProcessCsvInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: process_csv_input/

  CreateManifestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: create_manifest/

  FinalizeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 900
      MemorySize: 512
      CodeUri: finalize/
      Environment:
        Variables:
          PROCESS_BUCKET: !Ref ProcessBucket

  # PYRAMID GENERATOR PROCESSING
  ImageTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ImageTaskRole
    Properties:
      Family: !Sub '${AWS::StackName}-Manifest'
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ImageTaskRole.Arn
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ContainerTaskExecutionRoleArn']]
      ContainerDefinitions:
        - Name: !Sub '${AWS::StackName}-Manifest'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          EntryPoint: ['pyramid.py']
          Image: !Ref ContainerImageUrl
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group :
                Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogGroup']]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub '${AWS::StackName}-ManifestTask'

  ImageTaskRole:
    Type: AWS::IAM::Role
    DependsOn:
      - ProcessBucket
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ProcessBucketPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                  - "s3:ListBucket"
                Effect: "Allow"
                Resource:
                  - !GetAtt ProcessBucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt ProcessBucket.Arn
                        - "/*"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: FargatePassPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${AWS::StackName}-*'
                  - Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'ContainerTaskExecutionRoleArn']]
        - PolicyName: FargateTaskPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:RunTask"
                  - "ecs:StopTask"
                  - "ecs:DescribeTasks"
                Resource:
                  - !Ref ImageTaskDefinition
              - Effect: Allow
                Action:
                  - "events:PutTargets"
                  - "events:PutRule"
                  - "events:DescribeRule"
                Resource:
                  - !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForECSTaskRule"

  SchemaStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-SchemaStateMachine"
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Manifest Pipeline",
              "StartAt": "InitManifest",
              "States": {
                "InitManifest": {
                  "Type": "Task",
                  "Resource": "${initManifestLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "ImageProcessingTask"
                },
                "ImageProcessingTask": {
                  "Type": "Task",
                  "Resource": "arn:${AWS::Partition}:states:::ecs:runTask.sync",
                  "ResultPath": "$.ecs.ecsresults",
                  "Parameters": {
                    "LaunchType": "FARGATE",
                    "Cluster": "${InfrastructureStackName}-Cluster",
                    "TaskDefinition": "${ImageTaskDefinition}",
                    "Overrides": {
                      "ContainerOverrides": [
                          {
                              "Name": "${AWS::StackName}-Manifest",
                              "Command.$": "$.ecs-args"
                          }
                      ]
                    },
                    "NetworkConfiguration": {
                      "AwsvpcConfiguration": {
                        "Subnets": [
                          "${publicSubnet1}",
                          "${publicSubnet2}"
                        ],
                        "AssignPublicIp": "ENABLED"
                      }
                    }
                  },
                  "Next": "ChoiceSourceType",
                  "Catch": [
                      {
                        "ErrorEquals": [ "States.ALL" ],
                        "ResultPath": "$.unexpected",
                        "Next": "Finalize"
                      }
                  ]
                },
                "ChoiceSourceType": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.metadata-source-type",
                      "StringEquals": "csv",
                      "Next": "ProcessCsvInput"
                    },
                    {
                      "Variable": "$.metadata-source-type",
                      "StringEquals": "mets",
                      "Next": "ProcessMetsInput"
                    }
                  ]
                },
                "ProcessCsvInput": {
                  "Type": "Task",
                  "Resource": "${processCsvInputLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "ProcessManifest"
                },
                "ProcessMetsInput": {
                  "Type": "Task",
                  "Resource": "${processMetsInputLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "ProcessManifest"
                },
                "ProcessManifest": {
                  "Type": "Task",
                  "Resource": "${createManifestLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "Finalize"
                },

                "Finalize": {
                  "Type": "Task",
                  "Resource": "${finalizeLambdaArn}",
                  "End": true
                }
              }
            }
          -
            {
              publicSubnet1: {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}:PublicSubnet1ID"}},
              publicSubnet2: {"Fn::ImportValue" : {"Fn::Sub" : "${NetworkStackName}:PublicSubnet2ID"}},
              initManifestLambdaArn: !GetAtt [InitManifestLambdaFunction, Arn],
              processCsvInputLambdaArn: !GetAtt [ ProcessCsvInputLambdaFunction, Arn ],
              createManifestLambdaArn: !GetAtt [ CreateManifestLambdaFunction, Arn ],
              processMetsInputLambdaArn: !GetAtt [ProcessMetsInputLambdaFunction, Arn],
              finalizeLambdaArn: !GetAtt [ FinalizeLambdaFunction, Arn ]
            }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  FindObjectsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: find_objects/
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SSM_MARBLE_DATA_PROCESSING_KEY_BASE: !Ref MarbleProcessingKeyPath

  FindImagesLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 90
      CodeUri: find_images_for_objects/
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SSM_MARBLE_DATA_PROCESSING_KEY_BASE: !Ref MarbleProcessingKeyPath

  PopulatePipelineLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Runtime: python3.7
      Timeout: 900
      CodeUri: send_objects_to_pipeline/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - 'states:ListStateMachines'
                - 'states:StartExecution'
              Resource: !Ref StateMachineMets
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SSM_MARBLE_DATA_PROCESSING_KEY_BASE: !Ref MarbleProcessingKeyPath
          STATE_MACHINE: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-SchemaStateMachine"


  StateMachineMets:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-MetsStateMachine"
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Populate Manifest Pipeline with Changed metadata and images",
              "StartAt": "FindObjectsTask",
              "States": {
                "FindObjectsTask": {
                  "Type": "Task",
                  "Resource": "${findObjectsLambdaArn}",
                  "Next": "FindImagesTask"
                },
                "FindImagesTask": {
                  "Type": "Task",
                  "Resource": "${findImagesLambdaArn}",
                  "Next": "PopulatePipelineTask"
                },
                "PopulatePipelineTask": {
                  "Type": "Task",
                  "Resource": "${populatePipelineLambdaArn}",
                  "Next": "ChoiceSourceType"
                },
                "ChoiceSourceType": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.populatePipelineCompleted",
                      "BooleanEquals": false,
                      "Next": "PopulatePipelineTask"
                    },
                    {
                      "Variable": "$.populatePipelineCompleted",
                      "BooleanEquals": true,
                      "Next": "SuccessState"
                    }
                  ]
                },
                "SuccessState": {
                  "Type": "Succeed"
                }
              }
            }
          -
            {
              findObjectsLambdaArn: !GetAtt [FindObjectsLambdaFunction, Arn],
              findImagesLambdaArn: !GetAtt [ FindImagesLambdaFunction, Arn ],
              populatePipelineLambdaArn: !GetAtt [ PopulatePipelineLambdaFunction, Arn ],
            }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]



  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt ProcessBucket.Arn
              - !Sub ${ProcessBucket.Arn}/*
              - !GetAtt ManifestBucket.Arn
              - !Sub ${ManifestBucket.Arn}/*
          - Sid: AllowStateMachineActions
            Effect: Allow
            Action:
              - 'states:DescribeStateMachine'
              - 'states:ListExecutions'
              - 'states:StartExecution'
              - 'states:DescribeExecution'
              - 'states:GetExecutionHistory'
              - 'states:DescribeStateMachineForExecution'
            Resource:
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${SchemaStateMachine.Name}'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SchemaStateMachine.Name}:*'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${StateMachineMets.Name}'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${StateMachineMets.Name}:*'

  DataAdminPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DataAdminRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadWriteToBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - !GetAtt ProcessBucket.Arn
              - !Sub ${ProcessBucket.Arn}/*
              - !GetAtt ManifestBucket.Arn
              - !Sub ${ManifestBucket.Arn}/*
