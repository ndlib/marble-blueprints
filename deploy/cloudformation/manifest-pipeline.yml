Transform: 'AWS::Serverless-2016-10-31'
Description: >
  - Creates a series of lambdas and a step function to process manifests.
  - The lambdas create iiif manifest.
  - The finished product are copied to a bucket to serve manifests.
  - Creates a bucket for to serve manifests
  - Creates a bucket that the step functions use as an in process location.
  - Requires the iiif-service and marble-data-broker pipelines to be built.  Uses ssm keys from those services
Parameters:
  NetworkStackName:
    Type: String
    Description: The name of the parent networking stack created.
    Default: "marble-network"
  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure/networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  DomainStackName:
    Type: String
    Default: marble-domain
    Description: The name of the parent domain stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ImageSourceBucket:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The name of the source bucket that the IIIF Image service will read from for its assets.
    Default: '/all/stacks/marble-data-broker/publicbucket'
  ImageServerHostname:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The hostname of the IIIF Image Server
    Default: '/all/stacks/marble-image-service/hostname'
  AppConfigPath:
    Type: String
    Description: The path to look for the application config from
  MarbleProcessingKeyPath:
    Type: String
    Description: The ssm path to look for the marble data processing config from
    Default: '/all/marble-data-processing/prod'
  NoReplyEmailAddr:
    Type: String
    Description: Email address notification emails are sent from
    Default: "noreply@nd.edu"
  CacheSettings:
    Type: Number
    Description: The cache value to hold the manifests for.
    Default: 300
  SentryDsn:
    Type: String
    Description: The sentry data source name(DSN)
  RBSCS3ImageBucketName:
    Type: String
    Description: "The name of the bucket that rarebooks images are in for the search process"
  GoogleKeyPath:
    Type: String
    Description: The ssm path to look for the google team drive credentials and drive-id
    Default: '/all/marble/google'
  MuseumKeyPath:
    Type: String
    Description: The ssm path to look for the EmbARK museum credentials
    Default: '/all/marble/museum'
  CurateKeyPath:
    Type: String
    Description: The ssm path to look for the CurateND credentials
    Default: '/all/marble/curate'

  CreateDNSRecord:
    Type: String
    Default: "True"
    Description: If True, will attempt to create a Route 53 DNS record for the CloudFront.

  HostnamePrefix:
    Type: String
    Description: Hostname prefix for the manifest bucket CDN
    MaxLength: 63
    AllowedPattern: ^$|(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid hostname prefix value.
  CreateHarvestRule:
    Type: String
    Default: "False"
    Description: If True, will attempt to create a Rule to harvest metadata and create standard json.

Conditions:
  CreateDNS: !Equals [ !Ref CreateDNSRecord, 'True' ]
  CreateHarvestAndStdJsonCondition: !Equals [ !Ref CreateHarvestRule, 'True' ]

Outputs:
  SchemaStateMachine:
    Value: !Ref SchemaStateMachine

  MarbleSourceSystemHarvest:
    Value: !Ref MarbleSourceSystemHarvest

  ProcessBucket:
    Value: !Ref ProcessBucket

  ManifestBucket:
    Value: !Ref ManifestBucket

  Hostname:
    Description: The combination of HostnamePrefix and Domain
    Value: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Hostname']]

  DistributionDomainName:
    Description: The cloudfront distribution domain name. Use this if creating your CNAME record via some other DNS
    Value: !GetAtt Distribution.DomainName

Resources:

  SSMImageServerBaseUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/image-server-base-url"
      Value: !Ref ImageServerHostname
      Description: Image server base url

  SSMImageSourceBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/image-server-bucket"
      Value: !Ref ImageSourceBucket
      Description: Image server base url

  SSMManifestServerBaseUrl:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/manifest-server-base-url"
      Value: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Description: Manifest Server URL

  SSMManifestBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/manifest-server-bucket"
      Value: !Ref ManifestBucket
      Description: Manifest Server URL

  SSMProcessBucket:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/process-bucket"
      Value: !Ref ProcessBucket
      Description: Manifest Server URL

  SSMRBSCS3ImageBucketName:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name: !Sub "${AppConfigPath}/rbsc-image-bucket"
      Value: !Ref RBSCS3ImageBucketName
      Description: Name of RBSC Image Bucket

  ProcessBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
        LogFilePrefix: s3/data-broker/

  ManifestBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
        LogFilePrefix: s3/data-broker/
      CorsConfiguration:
        CorsRules:
          - Id: DefaultCorsHeader
            AllowedHeaders:
              - Authorization
            AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
            MaxAge: 3000
          - Id: CSRFCorsHeader
            AllowedHeaders:
              - X-CSRF-Token
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - '*'

  ManifestBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: OriginAccessIdentity
    Properties:
      Bucket: !Ref ManifestBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:GetBucketCors
            Resource: !Sub ${ManifestBucket.Arn}
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
          -
            Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${ManifestBucket.Arn}/*
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  Route53DNSCreation:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneName: !Sub
        - '${ResolvedDomainName}.'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Comment: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Name: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt Distribution.DomainName

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  Distribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - OriginAccessIdentity
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
            Fn::ImportValue: !Join [':', [!Ref DomainStackName, 'ACMCertificateARN']]
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        Comment: !Sub
          - '${HostnamePrefix}.${ResolvedDomainName}'
          - ResolvedDomainName:
              Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        Aliases:
          - !Sub
            - '${HostnamePrefix}.${ResolvedDomainName}'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        DefaultRootObject: index.json
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
            Headers:
              - "Access-Control-Request-Headers"
              - "Access-Control-Request-Method"
              - "Origin"
              - "Authorization"
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: Bucket
          LambdaFunctionAssociations:
            -
              EventType: origin-request
              LambdaFunctionARN: !Sub ${SPARedirectionLambda.Arn}:${SPARedirectionLambdaV2.Version}
        Origins:
          - Id: Bucket
            DomainName: !GetAtt ManifestBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref OriginAccessIdentity
        Logging:
          # This should result in "logbucketname.s3.amazonaws.com", where "logbucketname" is the value from an export
          # named "InfrastructureStackName:LogBucket"
          Bucket: !Join
            - .
            - - !ImportValue
                Fn::Join: [':', [!Ref InfrastructureStackName, 'LogBucket']]
              - s3
              - !Ref AWS::URLSuffix
          Prefix: !Sub
            - 'web/${HostnamePrefix}.${ResolvedDomainName}/'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
          IncludeCookies: true

  LambdaEdgeBasicExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SPARedirectionLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        # This Lambda will take incoming web requests and adjust the request URI as appropriate.
        # any directory that does not end with an index.json will have that appended to it.
        # this based off of the pattern for the marble urls which always require a directory with an
        # index.json
        ZipFile: >
          'use strict';
          exports.handler = (event, context, callback) => {
              var request = event.Records[0].cf.request;

              if (!request.uri.endsWith('/index.json') && !request.uri.endsWith('.xml')) {
                if (request.uri.endsWith('/')) {
                  request.uri = request.uri + 'index.json'
                } else {
                  request.uri = request.uri + '/index.json'
                }
              }
              return callback(null, request);
          };
      Description: Basic rewrite rule to send directory requests to appropriate locations in the SPA
      Handler: index.handler
      Role: !GetAtt LambdaEdgeBasicExecutionRole.Arn
      Runtime: nodejs10.x

  SPARedirectionLambdaV2:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref SPARedirectionLambda
      Description: Adds the rewrite rules as needed

  InitManifestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:PutObjectVersionAcl"
                - "s3:PutObjectAcl"
                - "s3:ListBucket"
                - "s3:ListBucketVersions"
              Resource:
                - !GetAtt ProcessBucket.Arn
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
      Runtime: python3.7
      Timeout: 90
      CodeUri: init/
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  ProcessManifestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:PutObjectVersionAcl"
                - "s3:PutObjectAcl"
                - "s3:ListBucket"
                - "s3:ListBucketVersions"
              Resource:
                - !GetAtt ProcessBucket.Arn
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
      Runtime: python3.7
      Timeout: 900
      CodeUri: process_manifest/
      Environment:
        Variables:
          SENTRY_DSN: !Ref SentryDsn

  FinalizeLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:ListBucket"
                - "s3:ListBucketVersions"
                - "s3:PutObjectVersionAcl"
                - "s3:PutObjectAcl"
                - "s3:DeleteObject"
                - "s3:DeleteObjectVersion"
              Resource:
                - !GetAtt ProcessBucket.Arn
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !GetAtt ManifestBucket.Arn
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
                - !Join ["", ["arn:aws:s3:::", !Ref ImageSourceBucket ]]
                - !Join ["", ["arn:aws:s3:::", !Ref ImageSourceBucket, "/*"]]
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ses:SendEmail"
              Resource: "*"
      Runtime: python3.7
      Timeout: 900
      MemorySize: 512
      CodeUri: finalize/
      Environment:
        Variables:
          PROCESS_BUCKET: !Ref ProcessBucket
          SENTRY_DSN: !Ref SentryDsn

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
        - PolicyName: GrantAccessToRulePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "states:StartExecution"
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-MarbleSourceSystemHarvest"
        - PolicyName: AllowStepFunctionLoggingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                Resource: !Sub
                  - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ResolvedLogGroup}:*"
                  - ResolvedLogGroup:
                      Fn::ImportValue: !Sub "${InfrastructureStackName}:LogGroup"
              - Effect: Allow
                Action:
                  - "logs:CreateLogDelivery"
                  - "logs:GetLogDelivery"
                  - "logs:UpdateLogDelivery"
                  - "logs:DeleteLogDelivery"
                  - "logs:ListLogDeliveries"
                  - "logs:PutResourcePolicy"
                  - "logs:DescribeResourcePolicies"
                Resource: "*"


  SchemaStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-SchemaStateMachine"
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Manifest Pipeline",
              "StartAt": "InitManifest",
              "States": {
                "InitManifest": {
                  "Type": "Task",
                  "Resource": "${initManifestLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "ProcessManifest"
                },
                "ProcessManifest": {
                  "Type": "Task",
                  "Resource": "${processManifestLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "Finalize"
                    }
                  ],
                  "Next": "RestartProcessManifest"
                },
                "RestartProcessManifest": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.process_manifest_complete",
                      "BooleanEquals": false,
                      "Next": "ProcessManifest"
                    },
                    {
                      "Variable": "$.process_manifest_complete",
                      "BooleanEquals": true,
                      "Next": "Finalize"
                    }
                  ]
                },
                "Finalize": {
                  "Type": "Task",
                  "Resource": "${finalizeLambdaArn}",
                  "Next": "RestartFinalize"
                },
                "RestartFinalize": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.finalize_complete",
                      "BooleanEquals": false,
                      "Next": "Finalize"
                    },
                    {
                      "Variable": "$.finalize_complete",
                      "BooleanEquals": true,
                      "Next": "DenoteError"
                    }
                  ]
                },
                "DenoteError": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.error_found",
                      "BooleanEquals": true,
                      "Next": "FailureState"
                    }
                  ],
                  "Default": "SuccessState"
                },
                "SuccessState": {
                  "Type": "Succeed"
                },
                "FailureState": {
                  "Type": "Fail"
                }
              }
            }
          -
            {
              initManifestLambdaArn: !GetAtt [InitManifestLambdaFunction, Arn],
              processManifestLambdaArn: !GetAtt [ ProcessManifestLambdaFunction, Arn ],
              finalizeLambdaArn: !GetAtt [ FinalizeLambdaFunction, Arn ]
            }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt ProcessBucket.Arn
              - !Sub ${ProcessBucket.Arn}/*
              - !GetAtt ManifestBucket.Arn
              - !Sub ${ManifestBucket.Arn}/*
          - Sid: AllowStateMachineActions
            Effect: Allow
            Action:
              - 'states:DescribeStateMachine'
              - 'states:ListExecutions'
              - 'states:StartExecution'
              - 'states:DescribeExecution'
              - 'states:GetExecutionHistory'
              - 'states:DescribeStateMachineForExecution'
            Resource:
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${SchemaStateMachine.Name}'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${SchemaStateMachine.Name}:*'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${MarbleSourceSystemHarvest.Name}'
              - !Sub 'arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${MarbleSourceSystemHarvest.Name}:*'


  DataAdminPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DataAdminRoleName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowReadWriteToBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
              - 's3:DeleteObject'
            Resource:
              - !GetAtt ProcessBucket.Arn
              - !Sub ${ProcessBucket.Arn}/*
              - !GetAtt ManifestBucket.Arn
              - !Sub ${ManifestBucket.Arn}/*


  MuseumExportLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      CodeUri: museum_export/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${GoogleKeyPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MuseumKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
                - "s3:DeleteObject"
                - "s3:ListBucket"
              Resource:
                - !GetAtt ProcessBucket.Arn
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !GetAtt ManifestBucket.Arn
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  AlephExportLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      CodeUri: aleph_export/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:ListObjects'
                - 's3:ListBucket'
              Resource:
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}"
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
              Resource:
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  CurateExportLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      CodeUri: curate_export/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CurateKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
              Resource:
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  ArchivesSpaceExportLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      CodeUri: archivesspace_export/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:ListObjects'
                - 's3:ListBucket'
              Resource:
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}"
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - 's3:GetObject'
              Resource:
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  CollectionsApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      CodeUri: collections_api/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:ListObjects'
                - 's3:ListBucket'
              Resource:
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}"
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - 's3:GetObject'
                - "s3:ListBucket"
                - "s3:ListBucketVersions"
              Resource:
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
                - !GetAtt ProcessBucket.Arn
                - !GetAtt ManifestBucket.Arn
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  ObjectFilesApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.run
      Runtime: python3.7
      Timeout: 900
      MemorySize: 512
      CodeUri: object_files_api/
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - 's3:ListObjects'
                - 's3:ListBucket'
              Resource:
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}"
                - !Sub "arn:aws:s3:::${RBSCS3ImageBucketName}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "ssm:GetParametersByPath"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppConfigPath}/*"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${MarbleProcessingKeyPath}/*"
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - 's3:GetObject'
                - "s3:ListBucket"
                - "s3:ListBucketVersions"
              Resource:
                - !Join ["", [!GetAtt ProcessBucket.Arn, "/*"]]
                - !Join ["", [!GetAtt ManifestBucket.Arn, "/*"]]
                - !GetAtt ProcessBucket.Arn
                - !GetAtt ManifestBucket.Arn
      Environment:
        Variables:
          SSM_KEY_BASE: !Ref AppConfigPath
          SENTRY_DSN: !Ref SentryDsn


  MarbleSourceSystemHarvest:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-MarbleSourceSystemHarvest"
      # LoggingConfiguration:
      #   Destinations:
      #     - CloudWatchLogsLogGroup:
      #         LogGroupArn: !Sub
      #           - "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${FindLogGroup}:*"
      #           - FindLogGroup:
      #               Fn::ImportValue: !Sub "${InfrastructureStackName}:LogGroup"
      #   IncludeExecutionData: true
      #   Level: ALL
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Create nd.json of metadata and image info from various source systems.",
              "StartAt": "ArchivesSpaceExportTask",
              "States": {
                "ArchivesSpaceExportTask": {
                  "Type": "Task",
                  "Resource": "${archivesSpaceExportLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "MuseumExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "MuseumExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "MuseumExportTask"
                    }
                  ],
                  "Next": "ArchivesSpaceLoopChoice"
                },
                "ArchivesSpaceLoopChoice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.archivesSpaceHarvestComplete",
                      "BooleanEquals": false,
                      "Next": "ArchivesSpaceExportTask"
                    },
                    {
                      "Variable": "$.archivesSpaceHarvestComplete",
                      "BooleanEquals": true,
                      "Next": "MuseumExportTask"
                    }
                  ]
                },
                "MuseumExportTask": {
                  "Type": "Task",
                  "Resource": "${museumExportLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "AlephExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "AlephExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "AlephExportTask"
                    }
                  ],
                  "Next": "MuseumLoopChoice"
                },
                "MuseumLoopChoice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.museumHarvestComplete",
                      "BooleanEquals": false,
                      "Next": "MuseumExportTask"
                    },
                    {
                      "Variable": "$.museumHarvestComplete",
                      "BooleanEquals": true,
                      "Next": "AlephExportTask"
                    }
                  ]
                },
                "AlephExportTask": {
                  "Type": "Task",
                  "Resource": "${alephExportLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CurateExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CurateExportTask"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CurateExportTask"
                    }
                  ],
                  "Next": "CurateExportTask"
                },
                "CurateExportTask": {
                  "Type": "Task",
                  "Resource": "${curateExportLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CollectionsApiTask"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CollectionsApiTask"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "CollectionsApiTask"
                    }
                  ],
                  "Next": "CurateLoopChoice"
                },
                "CurateLoopChoice": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.curateHarvestComplete",
                      "BooleanEquals": false,
                      "Next": "CurateExportTask"
                    },
                    {
                      "Variable": "$.curateHarvestComplete",
                      "BooleanEquals": true,
                      "Next": "CollectionsApiTask"
                    }
                  ]
                },
                "CollectionsApiTask": {
                  "Type": "Task",
                  "Resource": "${collectionsApiLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "ObjectFilesApiTask"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "ObjectFilesApiTask"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "ObjectFilesApiTask"
                    }
                  ],
                  "Next": "ObjectFilesApiTask"
                },
                "ObjectFilesApiTask": {
                  "Type": "Task",
                  "Resource": "${objectFilesApiLambdaArn}",
                  "Catch": [
                    {
                      "ErrorEquals": [ "Lambda.Unknown" ],
                      "ResultPath": "$.unexpected",
                      "Next": "FailState"
                    },
                    {
                      "ErrorEquals": [ "States.TaskFailed" ],
                      "ResultPath": "$.unexpected",
                      "Next": "FailState"
                    },
                    {
                      "ErrorEquals": [ "States.ALL" ],
                      "ResultPath": "$.unexpected",
                      "Next": "FailState"
                    }
                  ],
                  "Next": "SuccessState"
                },
                "SuccessState": {
                  "Type": "Succeed"
                },
                "FailState": {
                  "Type": "Fail"
                }
              }
            }
          -
            {
              museumExportLambdaArn:  !GetAtt [MuseumExportLambdaFunction, Arn],
              alephExportLambdaArn:  !GetAtt [AlephExportLambdaFunction, Arn],
              curateExportLambdaArn:  !GetAtt [CurateExportLambdaFunction, Arn],
              archivesSpaceExportLambdaArn:  !GetAtt [ArchivesSpaceExportLambdaFunction, Arn],
              collectionsApiLambdaArn:  !GetAtt [CollectionsApiLambdaFunction, Arn],
              objectFilesApiLambdaArn:  !GetAtt [ObjectFilesApiLambdaFunction, Arn],
            }
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]


  StartHarvestAndCreateStandardJsonRule:
    Type: AWS::Events::Rule
    Condition: CreateHarvestAndStdJsonCondition
    Properties:
      Description: "Starts the Step Functions to harvest metadata and create standard json."
      ScheduleExpression: "cron(0 6 * * ? *)"
      Targets:
        -
          Arn: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-MarbleSourceSystemHarvest"
          Id: "StartMarbleSourceSystemHarvest"
          RoleArn: !GetAtt [ StatesExecutionRole, Arn ]


  StartManifestPipelineRule:
    Type: AWS::Events::Rule
    Condition: CreateHarvestAndStdJsonCondition
    Properties:
      Description: "Starts the Step Functions to process images and create manifests."
      ScheduleExpression: "cron(0 8 * * ? *)"
      Targets:
        -
          Arn: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-SchemaStateMachine"
          Id: "StartManifestPipeline"
          RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
