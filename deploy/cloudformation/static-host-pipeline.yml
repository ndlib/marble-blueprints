AWSTemplateFormatVersion: '2010-09-09'
Description: >
  - Creates a CodeBuild Project to pull the GitHub repository,
  build a yarn package.
  - Creates a CodePipeline that has a specific CodeBuild associated,
  which on a merge to master will build the project, push it to
  a bucket, and deploy it to a test stack.
  - The scripts that are used at each phase of the CodeBuild are stored in the source repo rather than
  this file.


Parameters:
  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure stack that you created. Necessary
                 to locate and reference resources created by that stack.

  SourceRepoOwner:
    Type: String
    Description: The owner of the repository in Github

  SourceRepoName:
    Type: String
    Description: The name of the repository in Github

  CDBranchName:
    Type: String
    Default: master
    Description: The name of the branch to watch for continuous deployment

  BuildScriptsDir:
    Type: String
    Default: scripts/codebuild
    Description: The location of all codebuild scripts, relative to the root of the project. Expects to find the following scripts
      install.sh, pre_build.sh, build.sh, and post_build.sh.

  BuildOutputDir:
    Type: String
    Default: build
    Description: The location of the final build artifacts for the project. Everything in this directory will get copied to the target bucket.

  OAuth:
    Type: String
    NoEcho: true
    Description: The OAuth Token Value to connect CodePipeline to GitHub. Passed in at Runtime.

  ProdStackName:
    Type: String
    Description: The name of the CloudFormation stack that created the production static host

  TestStackName:
    Type: String
    Description: The name of the CloudFormation stack that created the test static host

  AppConfigPath:
    Type: String
    Default: "/all/static-host/"
    Description: The path the keys for parameter store should be read and written to for config

  ElasticsearchDomain:
    Type: String
    Default: "marble"
    Description: The domain name of the marble elasticsearch instance

Outputs:

  PipelineName:
    Description: The name of the pipeline created by this stack
    Value: !Ref CodePipeline
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PipelineName']]

  ApprovalTopic:
    Description: The manual approval SNS topic
    Value: !Ref ApprovalTopic
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ApprovalTopic']]

Resources:
  ApprovalTopic:
    Type: AWS::SNS::Topic

  CodeBuildRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "We're allowing the role to perform all log-related activities."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "ReadAppConfig"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/all/static-host/*"
        -
          PolicyName: "ReadGitOauth"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/esu/github/ndlib-git/oauth"
        -
          PolicyName: "ElasticsearchPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - es:ESHttpHead
                  - es:ESHttpPost
                  - es:ESHttpGet
                  - es:ESHttpPut
                  - es:ESHttpDelete
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchDomain}*/*"

  CodeBuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-CodeBuilder'
      Description: 'Builds source web component from GitHub'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 30
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 10
              commands:
                - echo Install started on `date`
                - chmod -R 755 ${BuildScriptsDir}/*
                - ${BuildScriptsDir}/install.sh ${AppConfigPath}${TestStackName}/
            pre_build:
              commands:
                - echo Pre-build started on `date`
                - ${BuildScriptsDir}/pre_build.sh
            build:
              commands:
                - echo Build started on `date`
                - ${BuildScriptsDir}/build.sh
            post_build:
              commands:
                - echo Beginning post build on `date`
                - ${BuildScriptsDir}/post_build.sh
                - printf $CODEBUILD_RESOLVED_SOURCE_VERSION > ${BuildOutputDir}/sha.txt
          artifacts:
            base-directory: ${BuildOutputDir}
            files:
              - '**/*'

      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId

  CodeTestDeployRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "We're allowing the role to perform all log-related activities."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "WriteToDeploymentBuckets"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - Fn::Sub:
                    - "arn:aws:s3:::${DeployBucket}"
                    - DeployBucket:
                        Fn::ImportValue: !Join [':', [!Ref TestStackName, 'BucketName']]
                  - Fn::Sub:
                    - "arn:aws:s3:::${DeployBucket}/*"
                    - DeployBucket:
                        Fn::ImportValue: !Join [':', [!Ref TestStackName, 'BucketName']]

  CodeProdDeployRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: "We're allowing the role to perform all log-related activities."
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodeBuildToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Policies:
        -
          PolicyName: "AllowCloudWatchLogsForCodeBuild"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action: logs:*
                Effect: Allow
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*
                  - arn:aws:logs:*:*:log-group:/aws/codebuild/*:*:*
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                Resource:
                  - !GetAtt CodeS3Bucket.Arn
                  - Fn::Join:
                      - ""
                      -
                        - !GetAtt CodeS3Bucket.Arn
                        - "/*"
        -
          PolicyName: "WriteToDeploymentBuckets"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - Fn::Sub:
                    - "arn:aws:s3:::${DeployBucket}"
                    - DeployBucket:
                        Fn::ImportValue: !Join [':', [!Ref ProdStackName, 'BucketName']]
                  - Fn::Sub:
                    - "arn:aws:s3:::${DeployBucket}/*"
                    - DeployBucket:
                        Fn::ImportValue: !Join [':', [!Ref ProdStackName, 'BucketName']]
        -
          PolicyName: "ReadEsuParameters"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -   Effect: Allow
                  Action:
                  -   ssm:DescribeParameters
                  Resource: '*'
              -   Effect: Allow
                  Action:
                  -   ssm:GetParameterHistory
                  -   ssm:GetParametersByPath
                  -   ssm:GetParameters
                  -   ssm:GetParameter
                  Resource:
                     Fn::Join:
                     - ""
                     -
                      - "arn:aws:ssm:"
                      -
                        Ref: "AWS::Region"
                      - ":"
                      -
                        Ref: "AWS::AccountId"
                      - ":parameter/esu/*"
              -   Effect: Allow
                  Action:
                  -   kms:Decrypt
                  Resource:
                    Fn::Join:
                    - ""
                    -
                      - "arn:aws:kms:"
                      -
                        Ref: "AWS::Region"
                      - ":"
                      -
                        Ref: "AWS::AccountId"
                      - ":key/CMK"


  CodeTestDeployer:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-CodeTestDeployer'
      Description: 'Deploys built source web component to test bucket'
      ServiceRole: !Ref CodeTestDeployRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        # This buildspec will first empty the bucket, then copy all files into it
        # This may be the only way to reliably sync the complete state of the
        # files to the bucket. Multiple back to back invocations of the pipeline
        # has caused new changes to fail to deploy when using aws s3 sync, possibly
        # due to the eventual consistency nature of s3.
        BuildSpec: |
          version: 0.2

          phases:
            pre_build:
              commands:
                - aws s3 rm s3://$DEST_BUCKET --recursive
            build:
              commands:
                - aws s3 cp --recursive . s3://$DEST_BUCKET/ --exclude "sha.txt"

      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: DEST_BUCKET
            Value:
              Fn::ImportValue: !Join [':', [!Ref TestStackName, 'BucketName']]


  CodeProdBuilder:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-CodeProdBuilder'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 30
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            install:
              runtime-versions:
                nodejs: 10
              commands:
                - echo Install started on `date`
                - chmod -R 755 ${BuildScriptsDir}/*
                - ${BuildScriptsDir}/install.sh ${AppConfigPath}${ProdStackName}/
            pre_build:
              commands:
                - echo Pre-build started on `date`
                - ${BuildScriptsDir}/pre_build.sh
            build:
              commands:
                - echo Build started on `date`
                - ${BuildScriptsDir}/build.sh
            post_build:
              commands:
                - echo Beginning post build on `date`
                - ${BuildScriptsDir}/post_build.sh
                - printf $CODEBUILD_RESOLVED_SOURCE_VERSION > ${BuildOutputDir}/sha.txt
          artifacts:
            base-directory: ${BuildOutputDir}
            files:
              - '**/*'

      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId

  CodeProdDeployer:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub '${AWS::StackName}-CodeProdDeployer'
      Description: 'Deploys built source web component to production bucket'
      ServiceRole: !Ref CodeProdDeployRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        # This buildspec will first empty the bucket, then copy all files into it
        # This may be the only way to reliably sync the complete state of the
        # files to the bucket. Multiple back to back invocations of the pipeline
        # has caused new changes to fail to deploy when using aws s3 sync, possibly
        # due to the eventual consistency nature of s3. See
        # https://docs.aws.amazon.com/AmazonS3/latest/dev/Introduction.html#ConsistencyModel
        BuildSpec: |
          version: 0.2

          phases:
            pre_build:
              commands:
                - aws s3 rm s3://$DEST_BUCKET --recursive
            build:
              commands:
                - SOURCE_SHA=$(cat sha.txt)
                - aws s3 cp --recursive . s3://$DEST_BUCKET/ --exclude "sha.txt"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: DEST_BUCKET
            Value:
              Fn::ImportValue: !Join [':', [!Ref ProdStackName, 'BucketName']]

  PostDeployGitHub:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-PostDeployGitHub'
      Description: 'CodeBuild to tag the latest commit in repo post-deploy'
      ServiceRole: !Ref CodeBuildRole
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Pre-build started on `date`
            build:
              commands:
                - SOURCE_SHA=$(cat sha.txt)
                - DATE=$(date)
            post_build:
              commands:
                - curl -i -X POST -H "Authorization:token ${OAUTH_TOKEN}" "${API_URL}/${SOURCE_SHA}" -d "{\"state\":\"success\",\"description\":\"Deployed to production on ${DATE}\",\"context\":\"${CODEBUILD_INITIATOR}\",\"target_url\":\"https://${TARGET_HOST}\"}"
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: OAUTH_TOKEN
            Type: PARAMETER_STORE
            Value: /esu/github/ndlib-git/oauth
          - Name: API_URL
            Value: !Sub "https://api.github.com/repos/${SourceRepoOwner}/${SourceRepoName}/statuses"
          - Name: TARGET_HOST
            Value:
              Fn::ImportValue: !Join [':', [!Ref ProdStackName, 'Hostname']]

  CodeS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: "TrustPolicyAllowCodePipelineToAssume"
            Effect: "Allow"
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  CodePipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to Allow CodePipeline to do its work"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
              - codepipeline:AcknowledgeJob
              - codepipeline:GetJobDetails
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineState
              - codepipeline:GetPipelineExecution
              - codepipeline:ListPipelineExecutions
              - codepipeline:PollForJobs
              - codepipeline:PutJobFailureResult
              - codepipeline:PutJobSuccessResult
              - codepipeline:RetryStageExecution
              - codepipeline:StartPipelineExecution
              - sns:Publish
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource:
              - !GetAtt CodeS3Bucket.Arn
              - Fn::Join:
                  - ""
                  -
                    - !GetAtt CodeS3Bucket.Arn
                    - "/*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketVersioning
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:StartBuild
              - codebuild:BatchGetBuilds
            Resource:
              - !GetAtt CodeBuilder.Arn
              - !GetAtt CodeTestDeployer.Arn
              - !GetAtt CodeProdBuilder.Arn
              - !GetAtt CodeProdDeployer.Arn
              - !GetAtt PostDeployGitHub.Arn
      Roles:
        - !Ref CodePipelineRole

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref CodeS3Bucket
        Type: S3
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: "AppCode"
              Namespace: "AppCodeVars"
              ActionTypeId:
                Owner: ThirdParty
                Category: Source
                Provider: GitHub
                Version: "1"
              Configuration:
                Owner: !Ref SourceRepoOwner
                Repo: !Ref SourceRepoName
                Branch: !Ref CDBranchName
                OAuthToken: !Ref OAuth
              OutputArtifacts:
                - Name: SourceCode
        -
          Name: Build
          Actions:
            -
              Name: "Build"
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuiltCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuilder
        -
          Name: Test
          Actions:
            - Name: "Deploy"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
              - Name: BuiltCode
              OutputArtifacts:
              - Name: TestDeployOutput
              Configuration:
                ProjectName: !Ref CodeTestDeployer
              RunOrder: 1
            -
              Name: "Approval"
              ActionTypeId:
                Owner: AWS
                Category: Approval
                Provider: Manual
                Version: "1"
              Configuration:
                NotificationArn: !Ref ApprovalTopic
                CustomData:
                  Fn::Sub:
                    - "A new version of https://github.com/${SourceRepoOwner}/${SourceRepoName}/tree/#{AppCodeVars.BranchName} has been deployed to https://${TestHostname} and is awaiting your approval. If you approve these changes, they will be deployed to https://${ProdHostname}.\n\n*Commit Message*\n#{AppCodeVars.CommitMessage}\n\nFor more details on the changes, see https://github.com/${SourceRepoOwner}/#{AppCodeVars.RepositoryName}/commit/#{AppCodeVars.CommitId}."
                    - TestHostname:
                        Fn::ImportValue: !Join [':', [!Ref TestStackName, 'Hostname']]
                      ProdHostname:
                        Fn::ImportValue: !Join [':', [!Ref ProdStackName, 'Hostname']]
              RunOrder: 2

        -
          Name: Production
          Actions:
            -
              Name: "Build"
              InputArtifacts:
                - Name: SourceCode
              ActionTypeId:
                Owner: AWS
                Category: Build
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeProdBuilder
              RunOrder: 1
            - Name: "Deploy"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
              - Name: BuiltCode
              OutputArtifacts:
              - Name: ProdDeployOutput
              Configuration:
                ProjectName: !Ref CodeProdDeployer
              RunOrder: 2
        -
          Name: PostProduction
          Actions:
            - Name: "AddGitHubStatus"
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: BuiltCode
              Configuration:
                ProjectName: !Ref PostDeployGitHub
              RunOrder: 1

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt CodeS3Bucket.Arn
              - !Sub ${CodeS3Bucket.Arn}/*
          - Sid: AllowPipelineActions
            Effect: Allow
            Action:
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineExecution'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionExecutions'
              - 'codepipeline:ListPipelineExecutions'
              - 'codepipeline:ListPipelines'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}/*'
          - Sid: AllowCodeBuildActions
            Effect: Allow
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:BatchGetProjects'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListBuildsForProject'
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*'
          - Sid: AllowCodeBuildLogs
            Effect: Allow
            Action:
              - 'logs:GetLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'

  DeploymentPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DeploymentRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowPipelineActions
            Effect: Allow
            Action:
              - 'codepipeline:DisableStageTransition'
              - 'codepipeline:EnableStageTransition'
              - 'codepipeline:GetPipeline'
              - 'codepipeline:GetPipelineExecution'
              - 'codepipeline:GetPipelineState'
              - 'codepipeline:ListActionExecutions'
              - 'codepipeline:ListPipelineExecutions'
              - 'codepipeline:ListPipelines'
              - 'codepipeline:PutApprovalResult'
              - 'codepipeline:RetryStageExecution'
              - 'codepipeline:StartPipelineExecution'
            Resource:
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'
              - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}/*'
          - Sid: AllowCodeBuildActions
            Effect: Allow
            Action:
              - 'codebuild:BatchGetBuilds'
              - 'codebuild:BatchGetProjects'
              - 'codebuild:ListBuilds'
              - 'codebuild:ListBuildsForProject'
            Resource:
              - !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*'
          - Sid: AllowCodeBuildLogs
            Effect: Allow
            Action:
              - 'logs:GetLogEvents'
            Resource:
              - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-*'
