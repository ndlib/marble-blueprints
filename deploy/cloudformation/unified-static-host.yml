---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Static host for webcomponents and single-page applications'


Parameters:

  InfrastructureStackName:
    Type: String
    Default: marble-app-infrastructure
    Description: The name of the parent infrastructure/networking stack that you created. Necessary
                 to locate and reference resources created by that stack.

  DomainStackName:
    Type: String
    Default: marble-domain
    Description: The name of the parent domain stack that you created. Necessary
                 to locate and reference resources created by that stack.

  CreateDNSRecord:
    Type: String
    Default: "True"
    Description: If True, will attempt to create a Route 53 DNS record for the CloudFront.

  HostnamePrefix:
    Type: String
    Description: Hostname prefix for the website CDN
    MaxLength: 63
    AllowedPattern: ^$|(?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid hostname prefix value.

  EnvType:
    Type: String
    Description: The type of environment to create.
    Default: dev
    AllowedValues:
      - dev
      - prod
    ConstraintDescription: must specify prod or dev.

Mappings:
  CacheSettings:
    dev:
      DefaultTTL: 0
    prod:
      DefaultTTL: 86400

Conditions:

  CreateDNS: !Equals [ !Ref CreateDNSRecord, 'True' ]

Outputs:

  BucketName:
    Description: Name of S3 bucket to hold website content
    Value: !Ref Bucket
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'BucketName']]

  Hostname:
    Description: The FQDN if one is given, otherwise the cloudfront distribution domain name.
    Value: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'Hostname']]

  DistributionDomainName:
    Description: The cloudfront distribution domain name.
    Value: !GetAtt Distribution.DomainName

Resources:

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Static assets in ${AWS::StackName}

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          Fn::ImportValue: !Join [':', [!Ref InfrastructureStackName, 'LogBucket']]
        LogFilePrefix: !Sub
            - 's3/${HostnamePrefix}.${ResolvedDomainName}/'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub ${Bucket.Arn}/*
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  Route53DNSCreation:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNS
    Properties:
      HostedZoneName: !Sub
        - '${ResolvedDomainName}.'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Comment: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Name: !Sub
        - '${HostnamePrefix}.${ResolvedDomainName}'
        - ResolvedDomainName:
            Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
      Type: CNAME
      TTL: '900'
      ResourceRecords:
        - !GetAtt Distribution.DomainName

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn:
              Fn::ImportValue: !Join [':', [!Ref DomainStackName, 'ACMCertificateARN']]
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only
        Comment: !Sub
            - '${HostnamePrefix}.${ResolvedDomainName}'
            - ResolvedDomainName:
                Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        Aliases:
          - !Sub
              - '${HostnamePrefix}.${ResolvedDomainName}'
              - ResolvedDomainName:
                  Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          Compress: true
          DefaultTTL: !FindInMap [CacheSettings, !Ref EnvType, "DefaultTTL"]
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: Bucket
          LambdaFunctionAssociations:
              -
                EventType: origin-request
                LambdaFunctionARN: !Ref SPARedirectionLambda.Version
        Origins:
          - Id: Bucket
            DomainName: !GetAtt Bucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - /
                - - origin-access-identity
                  - cloudfront
                  - !Ref OriginAccessIdentity
        Logging:
          # This should result in "logbucketname.s3.amazonaws.com", where "logbucketname" is the value from an export
          # named "InfrastructureStackName:LogBucket"
          Bucket: !Join
            - .
            - - !ImportValue
                Fn::Join: [':', [!Ref InfrastructureStackName, 'LogBucket']]
              - s3
              - !Ref AWS::URLSuffix
          Prefix: !Sub
               - 'web/${HostnamePrefix}.${ResolvedDomainName}/'
               - ResolvedDomainName:
                   Fn::ImportValue: !Sub '${DomainStackName}:DomainName'
          IncludeCookies: true

  LambdaEdgeBasicExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "edgelambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SPARedirectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src/unifiedEdgeLambda/handler.js
      Description: Basic rewrite rule to send directory requests to appropriate locations in the SPA
      Handler: handler.handler
      Role: !GetAtt LambdaEdgeBasicExecutionRole.Arn
      Runtime: nodejs12.x
      AutoPublishAlias: live

  DebugPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DebugRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*

  DataAdminPermissions:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue
            Fn::Sub: ${InfrastructureStackName}:DataAdminRoleName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowReadBuckets
            Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub ${Bucket.Arn}/*
